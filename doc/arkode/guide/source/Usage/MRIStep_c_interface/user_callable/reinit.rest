.. ----------------------------------------------------------------
   SUNDIALS Copyright Start
   Copyright (c) 2002-2021, Lawrence Livermore National Security
   and Southern Methodist University.
   All rights reserved.

   See the top-level LICENSE and NOTICE files for details.

   SPDX-License-Identifier: BSD-3-Clause
   SUNDIALS Copyright End
   ----------------------------------------------------------------

.. _ARKODE.Usage.MRIStep.Reinitialization:

MRIStep re-initialization function
-------------------------------------

To reinitialize the MRIStep module for the solution of a new problem,
where a prior call to :c:func:`MRIStepCreate()` has been made, the
user must call the function :c:func:`MRIStepReInit()`.  The new
problem must have the same size as the previous one.  This routine
retains the current settings for all ARKstep module options and
performs the same input checking and initializations that are done in
:c:func:`MRIStepCreate()`, but it performs no memory allocation as is
assumes that the existing internal memory is sufficient for the new
problem.  A call to this re-initialization routine deletes the
solution history that was stored internally during the previous
integration.  Following a successful call to
:c:func:`MRIStepReInit()`, call :c:func:`MRIStepEvolve()` again for the
solution of the new problem.

The use of :c:func:`MRIStepReInit()` requires that the number of Runge--Kutta
stages for both the slow and fast methods be no larger for the new problem than
for the previous problem.

One important use of the :c:func:`MRIStepReInit()` function is in the
treating of jump discontinuities in the RHS functions.  Except in cases
of fairly small jumps, it is usually more efficient to stop at each
point of discontinuity and restart the integrator with a readjusted
ODE model, using a call to this routine.  To stop when the location
of the discontinuity is known, simply make that location a value of
``tout``.  To stop when the location of the discontinuity is
determined by the solution, use the rootfinding feature.  In either
case, it is critical that the RHS functions *not* incorporate the
discontinuity, but rather have a smooth extension over the
discontinuity, so that the step across it (and subsequent rootfinding,
if used) can be done efficiently.  Then use a switch within the RHS
functions (communicated through ``user_data``) that can be flipped
between the stopping of the integration and the restart, so that the
restarted problem uses the new values (which have jumped).  Similar
comments apply if there is to be a jump in the dependent variable
vector.


.. c:function:: int MRIStepReInit(void* arkode_mem, ARKRhsFn fse, ARKRhsFn fsi, realtype t0, N_Vector y0)

   Provides required problem specifications and re-initializes the
   MRIStep outer (slow) stepper.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *fse* -- the name of the function (of type :c:func:`ARKRhsFn()`)
     defining the explicit slow portion of the right-hand side function in
     :math:`\dot{y} = f^E(t,y) + f^I(t,y) + f^F(t,y)`.

   * *fsi* -- the name of the function (of type :c:func:`ARKRhsFn()`)
     defining the implicit slow portion of the right-hand side function in
     :math:`\dot{y} = f^E(t,y) + f^I(t,y) + f^F(t,y)`.

   * *t0* -- the initial value of :math:`t`.

   * *y0* -- the initial condition vector :math:`y(t_0)`.

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL*  if the MRIStep memory was ``NULL``

   * *ARK_MEM_FAIL*  if a memory allocation failed

   * *ARK_ILL_INPUT* if an argument has an illegal value.

   **Notes:**
   If the inner (fast) stepper also needs to be reinitialized, its
   reinitialization function should be called before calling
   :c:func:`MRIStepReInit()` to reinitialize the outer stepper.

   All previously set options are retained but may be updated by calling
   the appropriate "Set" functions.

   If an error occurred, :c:func:`MRIStepReInit()` also
   sends an error message to the error handler function.
