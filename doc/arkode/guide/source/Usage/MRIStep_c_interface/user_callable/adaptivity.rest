.. ----------------------------------------------------------------
   SUNDIALS Copyright Start
   Copyright (c) 2002-2021, Lawrence Livermore National Security
   and Southern Methodist University.
   All rights reserved.

   See the top-level LICENSE and NOTICE files for details.

   SPDX-License-Identifier: BSD-3-Clause
   SUNDIALS Copyright End
   ----------------------------------------------------------------

.. _ARKODE.Usage.MRIStep.MRIStepAdaptivityInputTable:

Optional inputs for time step adaptivity
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The mathematical explanation of ARKODE's time step adaptivity
algorithm, including how each of the parameters below is used within
the code, is provided in :numref:`ARKODE.Mathematics.Adaptivity`.


.. cssclass:: table-bordered

==============================================  ======================================  ========
Optional input                                  Function name                           Default
==============================================  ======================================  ========
Set a custom time step adaptivity function      :c:func:`MRIStepSetAdaptivityFn()`      internal
Choose an existing time step adaptivity method  :c:func:`MRIStepSetAdaptivityMethod()`  0
Explicit stability safety factor                :c:func:`MRIStepSetCFLFraction()`       0.5
Time step error bias factor                     :c:func:`MRIStepSetErrorBias()`         1.5
Bounds determining no change in step size       :c:func:`MRIStepSetFixedStepBounds()`   1.0  1.5
Maximum step growth factor on error test fail   :c:func:`MRIStepSetMaxEFailGrowth()`    0.3
Maximum first step growth factor                :c:func:`MRIStepSetMaxFirstGrowth()`    10000.0
Maximum general step growth factor              :c:func:`MRIStepSetMaxGrowth()`         20.0
Time step safety factor                         :c:func:`MRIStepSetSafetyFactor()`      0.96
Error fails before MaxEFailGrowth takes effect  :c:func:`MRIStepSetSmallNumEFails()`    2
Explicit stability function                     :c:func:`MRIStepSetStabilityFn()`       none
==============================================  ======================================  ========



.. c:function:: int MRIStepSetAdaptivityFn(void* arkode_mem, ARKAdaptFn hfun, void* h_data)

   Sets a user-supplied time-step adaptivity function.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *hfun* -- name of user-supplied adaptivity function.

   * *h_data* -- pointer to user data passed to *hfun* every time
     it is called.

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** This function should focus on accuracy-based time step
   estimation; for stability based time steps the function
   :c:func:`MRIStepSetStabilityFn()` should be used instead.



.. c:function:: int MRIStepSetAdaptivityMethod(void* arkode_mem, int imethod, int idefault, int pq, realtype* adapt_params)

   Specifies the method (and associated parameters) used for time step adaptivity.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *imethod* -- accuracy-based adaptivity method choice
     (0 :math:`\le` `imethod` :math:`\le` 5):
     0 is PID, 1 is PI, 2 is I, 3 is explicit Gustafsson, 4 is
     implicit Gustafsson, and 5 is the ImEx Gustafsson.

   * *idefault* -- flag denoting whether to use default adaptivity
     parameters (1), or that they will be supplied in the
     *adapt_params* argument (0).

   * *pq* -- flag denoting whether to use the embedding order of
     accuracy *p* (0) or the method order of accuracy *q* (1)
     within the adaptivity algorithm.  *p* is the default.

   * *adapt_params[0]* -- :math:`k_1` parameter within accuracy-based adaptivity algorithms.

   * *adapt_params[1]* -- :math:`k_2` parameter within accuracy-based adaptivity algorithms.

   * *adapt_params[2]* -- :math:`k_3` parameter within accuracy-based adaptivity algorithms.

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** If custom parameters are supplied, they will be checked
   for validity against published stability intervals.  If other
   parameter values are desired, it is recommended to instead provide
   a custom function through a call to :c:func:`MRIStepSetAdaptivityFn()`.



.. c:function:: int MRIStepSetCFLFraction(void* arkode_mem, realtype cfl_frac)

   Specifies the fraction of the estimated explicitly stable step to use.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *cfl_frac* -- maximum allowed fraction of explicitly stable step (default is 0.5).

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Any non-positive parameter will imply a reset to the default
   value.



.. c:function:: int MRIStepSetErrorBias(void* arkode_mem, realtype bias)

   Specifies the bias to be applied to the error estimates within
   accuracy-based adaptivity strategies.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *bias* -- bias applied to error in accuracy-based time
     step estimation (default is 1.5).

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Any value below 1.0 will imply a reset to the default value.



.. c:function:: int MRIStepSetFixedStepBounds(void* arkode_mem, realtype lb, realtype ub)

   Specifies the step growth interval in which the step size will remain unchanged.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *lb* -- lower bound on window to leave step size fixed (default is 1.0).

   * *ub* -- upper bound on window to leave step size fixed (default is 1.5).

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Any interval *not* containing 1.0 will imply a reset to the default values.



.. c:function:: int MRIStepSetMaxEFailGrowth(void* arkode_mem, realtype etamxf)

   Specifies the maximum step size growth factor upon multiple successive
   accuracy-based error failures in the solver.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *etamxf* -- time step reduction factor on multiple error fails (default is 0.3).

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Any value outside the interval :math:`(0,1]` will imply a reset to the default value.



.. c:function:: int MRIStepSetMaxFirstGrowth(void* arkode_mem, realtype etamx1)

   Specifies the maximum allowed step size change following the very
   first integration step.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *etamx1* -- maximum allowed growth factor after the first time
     step (default is 10000.0).

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Any value :math:`\le 1.0` will imply a reset to the default value.



.. c:function:: int MRIStepSetMaxGrowth(void* arkode_mem, realtype mx_growth)

   Specifies the maximum growth of the step size between consecutive
   steps in the integration process.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *growth* -- maximum allowed growth factor between consecutive time steps (default is 20.0).

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Any value :math:`\le 1.0` will imply a reset to the default
   value.



.. c:function:: int MRIStepSetSafetyFactor(void* arkode_mem, realtype safety)

   Specifies the safety factor to be applied to the accuracy-based
   estimated step.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *safety* -- safety factor applied to accuracy-based time step (default is 0.96).

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Any non-positive parameter will imply a reset to the default
   value.



.. c:function:: int MRIStepSetSmallNumEFails(void* arkode_mem, int small_nef)

   Specifies the threshold for "multiple" successive error failures
   before the *etamxf* parameter from
   :c:func:`MRIStepSetMaxEFailGrowth()` is applied.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *small_nef* -- bound to determine 'multiple' for *etamxf* (default is 2).

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Any non-positive parameter will imply a reset to the default value.



.. c:function:: int MRIStepSetStabilityFn(void* arkode_mem, ARKExpStabFn EStab, void* estab_data)

   Sets the problem-dependent function to estimate a stable
   time step size for the explicit portion of the ODE system.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *EStab* -- name of user-supplied stability function.

   * *estab_data* -- pointer to user data passed to *EStab* every time
     it is called.

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** This function should return an estimate of the absolute
   value of the maximum stable time step for the the ODE system.  It
   is not required, since accuracy-based adaptivity may be sufficient
   for retaining stability, but this can be quite useful for problems
   where the right-hand side function :math:`f(t,y)` may contain stiff
   terms.

