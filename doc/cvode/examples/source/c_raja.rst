..
   Programmer(s): Daniel M. Margolis @ SMU
   ----------------------------------------------------------------
   SUNDIALS Copyright Start
   Copyright (c) 2002-2023, Lawrence Livermore National Security
   and Southern Methodist University.
   All rights reserved.

   See the top-level LICENSE and NOTICE files for details.

   SPDX-License-Identifier: BSD-3-Clause
   SUNDIALS Copyright End
   ----------------------------------------------------------------

:tocdepth: 3


.. _raja_c:

====================================
RAJA C example problems
====================================



.. _cvAdvDiff_kry_raja:

cvAdvDiff_kry_raja
==============================

Description
------------

The example program :literal:`cvAdvDiff_kry_raja.cu` solves the same :math:`2`-D 
advection-diffusion equation as in Sections :ref:`deep_dive.cvAdvDiff_bnd` and
:ref:`cvAdvDiff_kry_cuda`.

The file :literal:`nvector_raja.h` contains the definition of the RAJA
:literal:`N_Vector` type, and :literal:`RAJA.hpp` definition of the RAJA
:literal:`forall` loops. The prototype vector in the main body of the program is created
using :literal:`N_VNew_Raja` function. 

In order to get a good performance and avoid moving data between host
and device at every iteration, it is recommended that user evaluates  
model at the device. In the example, user-supplied model right hand side 
and Jacobian-vector product functions, :literal:`f` and :literal:`jtv`, operate on 
the device data. Vector data on the device is accessed using 
:literal:`N_VGetDeviceArrayPointer_Raja` function. Looping over vector 
components is implemented using RAJA :literal:`forall` loops.

Problem output
---------------

The output generated by :literal:`cvAdvDiff_kry_raja` is shown below.

.. include:: ../../../../examples/cvode/raja/cvAdvDiff_kry_raja.out
   :literal:

