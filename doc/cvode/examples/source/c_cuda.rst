..
   Programmer(s): Daniel M. Margolis @ SMU
   ----------------------------------------------------------------
   SUNDIALS Copyright Start
   Copyright (c) 2002-2023, Lawrence Livermore National Security
   and Southern Methodist University.
   All rights reserved.

   See the top-level LICENSE and NOTICE files for details.

   SPDX-License-Identifier: BSD-3-Clause
   SUNDIALS Copyright End
   ----------------------------------------------------------------

:tocdepth: 3


.. _cuda_c:

====================================
CUDA C example problems
====================================



.. _cvAdvDiff_kry_cuda:

cvAdvDiff_kry_cuda
===============================

Description
------------

The example program :literal:`cvAdvDiff_kry_cuda.cu` solves the same :math:`2`-D 
advection-diffusion equation as in Section :ref:`deep_dive.cvAdvDiff_bnd`, but
instead of using a banded direct solver, it uses unpreconditioned 
Krylov solver. Here we only highlight differences between the two 
examples. 

The :literal:`cvAdvDiff_kry_cuda.cu` program includes files
:literal:`sunlinsol_spmgr.h` in order to use the SPGMR
Krylov linear solver. File :literal:`cvode.h` provides the prototypes for
:literal:`CVodeSetLinearSolver`, which sets the iterative linear solver for
CVode, and :literal:`CVodeSetJacTimes`, which sets the pointer to the user
supplied Jacobian-vector product function.
The file :literal:`nvector_cuda.h` is included for the definition of the CUDA
:literal:`N_Vector` type. The prototype vector is created
using :literal:`N_VNew_Cuda` function. 

In order to get a good performance and avoid moving data between host
and device at every iteration, it is recommended that user evaluates  
model at the device. In the example, model right hand side and Jacobian-vector
product are implemented as CUDA kernels :literal:`fKernel` and :literal:`jtvKernel`,
respectively. User provided C functions :literal:`f` and :literal:`jtv`, which are called
directly by CVODE, set thread partitioning and launch thier respective 
CUDA kernels. Vector data on the device is accessed using 
:literal:`N_VGetDeviceArrayPointer_Cuda` function.

Problem output
---------------

The output generated by :literal:`cvAdvDiff_kry_cuda` is shown below.

.. include:: ../../../../examples/cvode/cuda/cvAdvDiff_kry_cuda.out
   :literal:

