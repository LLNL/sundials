.. ----------------------------------------------------------------
   SUNDIALS Copyright Start
   Copyright (c) 2002-2021, Lawrence Livermore National Security
   and Southern Methodist University.
   All rights reserved.

   See the top-level LICENSE and NOTICE files for details.

   SPDX-License-Identifier: BSD-3-Clause
   SUNDIALS Copyright End
   ----------------------------------------------------------------

.. _ARKODE.Usage.MRIStep.LinearSolvers:

Linear solver interface functions
-------------------------------------------

As previously explained, the Newton iterations used in solving
implicit systems within MRIStep require the solution of linear
systems of the form

.. math::
   \mathcal{A}\left(z_i^{(m)}\right) \delta^{(m+1)} = -G\left(z_i^{(m)}\right)

where

.. math::
   \mathcal{A} \approx I - \gamma J, \qquad J = \frac{\partial f^I}{\partial y}.

ARKODE's ARKLS linear solver interface supports all valid
``SUNLinearSolver`` modules for this task.

Matrix-based ``SUNLinearSolver`` modules utilize ``SUNMatrix`` objects
to store the approximate Jacobian matrix :math:`J`, the Newton matrix
:math:`\mathcal{A}`, and, when using direct solvers, the factorizations
used throughout the solution process.

Matrix-free ``SUNLinearSolver`` modules instead use iterative methods
to solve the Newton systems of equations, and only require the
*action* of the matrix on a vector, :math:`\mathcal{A}v`.  With most
of these methods, preconditioning can be done on the left only, on the
right only, on both the left and the right, or not at all.  The
exceptions to this rule are SPFGMR that supports right preconditioning
only and PCG that performs symmetric preconditioning.  For the
specification of a preconditioner, see the iterative linear solver
portions of :numref:`ARKODE.Usage.MRIStep.OptionalInputs` and
:numref:`ARKODE.Usage.UserSupplied`.

If preconditioning is done, user-supplied functions should be used to
define left and right preconditioner matrices :math:`P_1` and
:math:`P_2` (either of which could be the identity matrix), such that
the product :math:`P_{1}P_{2}` approximates the Newton matrix
:math:`\mathcal{A} = I - \gamma J`.

To specify a generic linear solver for MRIStep to use for the Newton
systems, after the call to :c:func:`MRIStepCreate()` but before any
calls to :c:func:`MRIStepEvolve()`, the user's program must create the
appropriate ``SUNLinearSolver`` object and call the function
:c:func:`MRIStepSetLinearSolver()`, as documented below.  To create
the ``SUNLinearSolver`` object, the user may call one of the
SUNDIALS-packaged SUNLinSol module constructor routines via a call of
the form

.. code:: c

   SUNLinearSolver LS = SUNLinSol_*(...);

The current list of SUNDIALS-packaged SUNLinSol modules, and their
constructor routines, may be found in chapter :numref:`SUNLinSol`.
Alternately, a user-supplied ``SUNLinearSolver`` module may be created
and used.  Specific information on how to create such user-provided
modules may be found in :numref:`SUNLinSol.API.Custom`.

Once this solver object has been constructed, the user should attach
it to MRIStep via a call to :c:func:`MRIStepSetLinearSolver()`. The
first argument passed to this function is the MRIStep memory pointer
returned by :c:func:`MRIStepCreate()`; the second argument is the
``SUNLinearSolver`` object created above.  The third argument is an
optional ``SUNMatrix`` object to accompany matrix-based
``SUNLinearSolver`` inputs (for matrix-free linear solvers, the third
argument should be ``NULL``).  A call to this function initializes the
ARKLS linear solver interface, linking it to the MRIStep integrator,
and allows the user to specify additional parameters and routines
pertinent to their choice of linear solver.

.. c:function:: int MRIStepSetLinearSolver(void* arkode_mem, SUNLinearSolver LS, SUNMatrix J)

   This function specifies the ``SUNLinearSolver`` object that MRIStep
   should use, as well as a template Jacobian ``SUNMatrix`` object (if
   applicable).

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *LS* -- the ``SUNLinearSolver`` object to use.
      * *J* -- the template Jacobian ``SUNMatrix`` object to use (or
        ``NULL`` if not applicable).

   **Return value:**
      * *ARKLS_SUCCESS*   if successful
      * *ARKLS_MEM_NULL*  if the MRIStep memory was ``NULL``
      * *ARKLS_MEM_FAIL*  if there was a memory allocation failure
      * *ARKLS_ILL_INPUT* if ARKLS is incompatible with the
        provided *LS* or *J* input objects, or the current
        ``N_Vector`` module.

   **Notes:**  If *LS* is a matrix-free linear solver, then the *J*
   argument should be ``NULL``.

   If *LS* is a matrix-based linear solver, then the template Jacobian
   matrix *J* will be used in the solve process, so if additional
   storage is required within the ``SUNMatrix`` object (e.g. for
   factorization of a banded matrix), ensure that the input object is
   allocated with sufficient size (see the documentation of
   the particular SUNMATRIX type in :numref:`SUNMatrix` for
   further information).

   When using sparse linear solvers, it is typically much more
   efficient to supply *J* so that it includes the full sparsity
   pattern of the Newton system matrices :math:`\mathcal{A} =
   I-\gamma J`, even if *J* itself has zeros in nonzero
   locations of :math:`I`.  The reasoning for this is
   that :math:`\mathcal{A}` is constructed in-place, on top of the
   user-specified values of *J*, so if the sparsity pattern in *J* is
   insufficient to store :math:`\mathcal{A}` then it will need to be
   resized internally by MRIStep.






.. _ARKODE.Usage.MRIStep.NonlinearSolvers:

Nonlinear solver interface functions
-------------------------------------------

When changing the nonlinear solver in MRIStep, after the
call to :c:func:`MRIStepCreate()` but before any calls to
:c:func:`MRIStepEvolve()`, the user's program must create the
appropriate SUNNonlinSol object and call
:c:func:`MRIStepSetNonlinearSolver()`, as documented below.  If any
calls to :c:func:`MRIStepEvolve()` have been made, then MRIStep will
need to be reinitialized by calling :c:func:`MRIStepReInit()` to
ensure that the nonlinear solver is initialized correctly before any
subsequent calls to :c:func:`MRIStepEvolve()`.

The first argument passed to the routine
:c:func:`MRIStepSetNonlinearSolver()` is the MRIStep memory pointer
returned by :c:func:`MRIStepCreate()`; the second argument passed
to this function is the desired ``SUNNonlinearSolver`` object to use for
solving the nonlinear system for each implicit stage. A call to this
function attaches the nonlinear solver to the main MRIStep integrator.


.. c:function:: int MRIStepSetNonlinearSolver(void* arkode_mem, SUNNonlinearSolver NLS)

   This function specifies the ``SUNNonlinearSolver`` object
   that MRIStep should use for implicit stage solves.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *NLS* -- the ``SUNNonlinearSolver`` object to use.

   **Return value:**
      * *ARK_SUCCESS*   if successful
      * *ARK_MEM_NULL*  if the MRIStep memory was ``NULL``
      * *ARK_MEM_FAIL*  if there was a memory allocation failure
      * *ARK_ILL_INPUT* if MRIStep is incompatible with the
        provided *NLS* input object.

   **Notes:**  MRIStep will use the Newton ``SUNNonlinearSolver`` module by
   default; a call to this routine replaces that module with the
   supplied *NLS* object.
