.. ----------------------------------------------------------------
   SUNDIALS Copyright Start
   Copyright (c) 2002-2021, Lawrence Livermore National Security
   and Southern Methodist University.
   All rights reserved.

   See the top-level LICENSE and NOTICE files for details.

   SPDX-License-Identifier: BSD-3-Clause
   SUNDIALS Copyright End
   ----------------------------------------------------------------

.. _ARKODE.Usage.MRIStep.MRIStepSolverInput:

===========================================
 Optional inputs for implicit stage solves
===========================================

The mathematical explanation for the nonlinear solver strategies used
by MRIStep, including how each of the parameters below is used within
the code, is provided in :numref:`ARKODE.Mathematics.Nonlinear`.


.. cssclass:: table-bordered

=============================================  =========================================  ============
Optional input                                 Function name                              Default
=============================================  =========================================  ============
Specify linearly implicit :math:`f^I`          :c:func:`MRIStepSetLinear()`               ``SUNFALSE``
Specify nonlinearly implicit :math:`f^I`       :c:func:`MRIStepSetNonlinear()`            ``SUNTRUE``
Implicit predictor method                      :c:func:`MRIStepSetPredictorMethod()`      0
Maximum number of nonlinear iterations         :c:func:`MRIStepSetMaxNonlinIters()`       3
Coefficient in the nonlinear convergence test  :c:func:`MRIStepSetNonlinConvCoef()`       0.1
Nonlinear convergence rate constant            :c:func:`MRIStepSetNonlinCRDown()`         0.3
Nonlinear residual divergence ratio            :c:func:`MRIStepSetNonlinRDiv()`           2.3
User-provided implicit stage predictor         :c:func:`MRIStepSetStagePredictFn()`       ``NULL``
RHS function for nonlinear system evaluations  :c:func:`MRIStepSetNlsRhsFn()`             ``NULL``
=============================================  =========================================  ============




.. c:function:: int MRIStepSetLinear(void* arkode_mem, int timedepend)

   Specifies that the implicit slow right-hand side function, :math:`f^I(t,y)`
   is linear in :math:`y`.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *timedepend* -- flag denoting whether the Jacobian of
        :math:`f^I(t,y)` is time-dependent (1) or not (0).
        Alternately, when using a matrix-free iterative linear solver
        this flag denotes time dependence of the preconditioner.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
      * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Tightens the linear solver tolerances and takes only a
   single Newton iteration.  Calls :c:func:`MRIStepSetDeltaGammaMax()`
   to enforce Jacobian recomputation when the step size ratio changes
   by more than 100 times the unit roundoff (since nonlinear
   convergence is not tested).  Only applicable when used in
   combination with the modified or inexact Newton iteration (not the
   fixed-point solver).

   The only SUNDIALS-provided SUNNonlinearSolver module that is compatible
   with the :c:func:`MRIStepSetLinear()` option is the Newton solver.



.. c:function:: int MRIStepSetNonlinear(void* arkode_mem)

   Specifies that the implicit slow right-hand side function, :math:`f^I(t,y)`
   is nonlinear in :math:`y`.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
      * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** This is the default behavior of MRIStep, so the function
   is primarily useful to undo a previous call to
   :c:func:`MRIStepSetLinear()`.  Calls
   :c:func:`MRIStepSetDeltaGammaMax()` to reset the step size ratio
   threshold to the default value.



.. c:function:: int MRIStepSetPredictorMethod(void* arkode_mem, int method)

   Specifies the method to use for predicting implicit solutions.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *method* -- method choice (0 :math:`\le` *method* :math:`\le` 4):

        * 0 is the trivial predictor,

        * 1 is the maximum order (dense output) predictor,

        * 2 is the variable order predictor, that decreases the
          polynomial degree for more distant RK stages,

        * 3 is the cutoff order predictor, that uses the maximum order
          for early RK stages, and a first-order predictor for distant
          RK stages,

        * 4 is the bootstrap predictor, that uses a second-order
          predictor based on only information within the current step.
          **deprecated**

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
      * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** The default value is 0.  If *method* is set to an
   undefined value, this default predictor will be used.

   **The "bootstrap" predictor (option 4 above) has been deprecated, and
   will be removed from a future release.**



.. c:function:: int MRIStepSetMaxNonlinIters(void* arkode_mem, int maxcor)

   Specifies the maximum number of nonlinear solver
   iterations permitted per slow MRI stage within each time step.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *maxcor* -- maximum allowed solver iterations per stage :math:`(>0)`.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
      * *ARK_ILL_INPUT* if an argument has an illegal value or if the SUNNONLINSOL module is ``NULL``
      * *ARK_NLS_OP_ERR* if the SUNNONLINSOL object returned a failure flag

   **Notes:** The default value is 3; set *maxcor* :math:`\le 0`
   to specify this default.



.. c:function:: int MRIStepSetNonlinConvCoef(void* arkode_mem, realtype nlscoef)

   Specifies the safety factor used within the nonlinear solver convergence test.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nlscoef* -- coefficient in nonlinear solver convergence test :math:`(>0.0)`.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
      * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** The default value is 0.1; set *nlscoef* :math:`\le 0`
   to specify this default.



.. c:function:: int MRIStepSetNonlinCRDown(void* arkode_mem, realtype crdown)

   Specifies the constant used in estimating the nonlinear solver convergence rate.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *crdown* -- nonlinear convergence rate estimation constant (default is 0.3).

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
      * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Any non-positive parameter will imply a reset to the default value.



.. c:function:: int MRIStepSetNonlinRDiv(void* arkode_mem, realtype rdiv)

   Specifies the nonlinear correction threshold beyond which the
   iteration will be declared divergent.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *rdiv* -- tolerance on nonlinear correction size ratio to
        declare divergence (default is 2.3).

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
      * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:** Any non-positive parameter will imply a reset to the default value.



.. c:function:: int MRIStepSetStagePredictFn(void* arkode_mem, ARKStagePredictFn PredictStage)

   Sets the user-supplied function to update the implicit stage predictor prior to
   execution of the nonlinear or linear solver algorithms that compute the implicit stage solution.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *PredictStage* -- name of user-supplied predictor function. If ``NULL``, then any
        previously-provided stage prediction function will be disabled.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   **Notes:** See :numref:`ARKODE.Usage.StagePredictFn` for more information on
   this user-supplied routine.


.. c:function:: int MRIStepSetNlsRhsFn(void* arkode_mem, ARKRhsFn nls_fs)

   Specifies an alternative implicit slow right-hand side function for
   evaluating :math:`f^I(t,y)` within nonlinear system function evaluations.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nls_fs* -- the alternative C function for computing the right-hand side
        function :math:`f^I(t,y)` in the ODE.

   **Return value:**
      * *ARK_SUCCESS* if successful.
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``.

   **Notes:** The default is to use the implicit slow right-hand side function
   provided to :c:func:`MRIStepCreate()` in nonlinear system functions. If the
   input implicit slow right-hand side function is ``NULL``, the default is
   used.

   When using a non-default nonlinear solver, this function must be called
   *after* :c:func:`MRIStepSetNonlinearSolver()`.


.. _ARKODE.Usage.MRIStep.ARKLsInputs:


==================================================
 Linear solver interface optional input functions
==================================================

The mathematical explanation of the linear solver methods
available to MRIStep is provided in :numref:`ARKODE.Mathematics.Linear`.  We
group the user-callable routines into
four categories: general routines concerning the update frequency for
matrices and/or preconditioners, optional inputs for matrix-based
linear solvers, optional inputs for matrix-free linear solvers, and
optional inputs for iterative linear solvers.  We note that the
matrix-based and matrix-free groups are mutually exclusive, whereas the
"iterative" tag can apply to either case.



.. _ARKODE.Usage.MRIStep.ARKLsInputs.General:

.. index::
   single: optional input; generic linear solver interface (MRIStep)

Optional inputs for the ARKLS linear solver interface
=====================================================

As discussed in :numref:`ARKODE.Mathematics.Linear.Setup`, ARKODE
strives to reuse matrix and preconditioner data for as many solves as
possible to amortize the high costs of matrix construction and
factorization.  To that end, MRIStep provides user-callable
routines to modify this behavior.  Recall that the
Newton system matrices that arise within an implicit stage solve are
:math:`{\mathcal A}(t,z) \approx I - \gamma J(t,z)`, where the
implicit right-hand side function has Jacobian matrix
:math:`J(t,z) = \frac{\partial f^I(t,z)}{\partial z}`.

The matrix or preconditioner for :math:`{\mathcal A}` can only be
updated within a call to the linear solver 'setup' routine.  In
general, the frequency with which the linear solver setup routine is
called may be controlled with the *msbp* argument to
:c:func:`MRIStepSetLSetupFrequency()`.  When this occurs, the
validity of :math:`{\mathcal A}` for successive time steps
intimately depends on whether the corresponding :math:`\gamma` and
:math:`J` inputs remain valid.

At each call to the linear solver setup routine the decision to update
:math:`\mathcal{A}` with a new value of :math:`\gamma`, and to reuse
or reevaluate Jacobian information, depends on several factors including:

* the success or failure of previous solve attempts,
* the success or failure of the previous time step attempts,
* the change in :math:`\gamma` from the value used when constructing :math:`\mathcal{A}`, and
* the number of steps since Jacobian information was last evaluated.

The frequency with which to update Jacobian information can be controlled
with the *msbj* argument to :c:func:`MRIStepSetJacEvalFrequency()`.
We note that this is only checked *within* calls to the linear solver setup
routine, so values *msbj* :math:`<` *msbp* do not make sense. For
linear-solvers with user-supplied preconditioning the above factors are used
to determine whether to recommend updating the Jacobian information in the
preconditioner (i.e., whether to set *jok* to ``SUNFALSE`` in calling the
user-supplied :c:type:`ARKLsPrecSetupFn()`). For matrix-based linear solvers
these factors determine whether the matrix :math:`J(t,y) = \frac{\partial f^I(t,y)}{\partial y}`
should be updated (either with an internal finite difference approximation or
a call to the user-supplied :c:type:`ARKLsJacFn`); if not then the previous
value is reused and the system matrix :math:`{\mathcal A}(t,y) \approx I - \gamma J(t,y)`
is recomputed using the current :math:`\gamma` value.



.. cssclass:: table-bordered

=============================================  =========================================  ============
Optional input                                 Function name                              Default
=============================================  =========================================  ============
Max change in step signaling new :math:`J`     :c:func:`MRIStepSetDeltaGammaMax()`        0.2
Linear solver setup frequency                  :c:func:`MRIStepSetLSetupFrequency()`      20
Jacobian / preconditioner update frequency     :c:func:`MRIStepSetJacEvalFrequency()`     51
=============================================  =========================================  ============


.. c:function:: int MRIStepSetDeltaGammaMax(void* arkode_mem, realtype dgmax)

   Specifies a scaled step size ratio tolerance, beyond which the
   linear solver setup routine will be signaled.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *dgmax* -- tolerance on step size ratio change before calling
        linear solver setup routine (default is 0.2).

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``
      * *ARK_ILL_INPUT* if an argument has an illegal value

   **Notes:**  Any non-positive parameter will imply a reset to the default value.


.. index::
   single: optional input; linear solver setup frequency (MRIStep)

.. c:function:: int MRIStepSetLSetupFrequency(void* arkode_mem, int msbp)

   Specifies the frequency of calls to the linear solver setup
   routine.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *msbp* -- the linear solver setup frequency.

   **Return value:**
      * *ARK_SUCCESS* if successful
      * *ARK_MEM_NULL* if the MRIStep memory is ``NULL``

   **Notes:**
   Positive values of **msbp** specify the linear solver setup frequency. For
   example, an input of 1 means the setup function will be called every time
   step while an input of 2 means it will be called called every other time
   step. If **msbp** is 0, the default value of 20 will be used. A negative
   value forces a linear solver step at each implicit stage.


.. index::
   single: optional input; Jacobian update frequency (MRIStep)
   single: optional input; preconditioner update frequency (MRIStep)

.. c:function:: int MRIStepSetJacEvalFrequency(void* arkode_mem, long int msbj)

   Specifies the frequency for recomputing the Jacobian or recommending a
   preconditioner update.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *msbj* -- the Jacobian re-computation or preconditioner update frequency.

   **Return value:**
      * *ARKLS_SUCCESS* if successful.
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``.
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``.

   **Notes:**
   The Jacobian update frequency is only checked *within* calls to the linear
   solver setup routine, as such values of *msbj* :math:`<` *msbp* will result
   in recomputing the Jacobian every *msbp* steps. See
   :c:func:`MRIStepSetLSetupFrequency()` for setting the linear solver setup
   frequency *msbp*.

   Passing a value *msbj* :math:`\le 0` indicates to use the
   default value of 50.

   This function must be called *after* the ARKLS system solver interface has
   been initialized through a call to :c:func:`MRIStepSetLinearSolver()`.







.. _ARKODE.Usage.MRIStep.ARKLsInputs.MatrixBased:

Optional inputs for matrix-based ``SUNLinearSolver`` modules
============================================================

.. cssclass:: table-bordered

=========================================  ===========================================  =============
Optional input                             Function name                                Default
=========================================  ===========================================  =============
Jacobian function                          :c:func:`MRIStepSetJacFn()`                  ``DQ``
Linear system function                     :c:func:`MRIStepSetLinSysFn()`               internal
Enable or disable linear solution scaling  :c:func:`MRIStepSetLinearSolutionScaling()`  on
=========================================  ===========================================  =============

When using matrix-based linear solver modules, the ARKLS solver interface needs
a function to compute an approximation to the Jacobian matrix :math:`J(t,y)` or
the linear system :math:`I - \gamma J`. The function to evaluate the Jacobian
must be of type :c:func:`ARKLsJacFn()`. The user can supply a custom Jacobian
function, or if using a dense or banded :math:`J` can use the default internal
difference quotient approximation that comes with the ARKLS interface.  At
present, we do not supply a corresponding routine to approximate Jacobian
entries in sparse matrices :math:`J`. To specify a user-supplied Jacobian
function *jac*, MRIStep provides the function :c:func:`MRIStepSetJacFn()`.
Alternatively, a function of type :c:func:`ARKLsLinSysFn()` can be provided to
evaluate the matrix :math:`I - \gamma J`. By default, ARKLS uses an
internal linear system function leveraging the SUNMATRIX API to form the matrix
:math:`I - \gamma J`. To specify a user-supplied linear system function
*linsys*, MRIStep provides the function :c:func:`MRIStepSetLinSysFn()`. In
either case the matrix information will be updated infrequently to reduce matrix
construction and, with direct solvers, factorization costs. As a result the
value of :math:`\gamma` may not be current and a scaling factor is applied to the
solution of the linear system to account for lagged value of :math:`\gamma`. See
:numref:`SUNLinSol.Lagged_matrix` for more details. The function
:c:func:`MRIStepSetLinearSolutionScaling()` can be used to disable this scaling
when necessary, e.g., when providing a custom linear solver that updates the
matrix using the current :math:`\gamma` as part of the solve.

The ARKLS interface passes the user data pointer to the Jacobian and linear
system functions. This allows the user to create an arbitrary structure with
relevant problem data and access it during the execution of the user-supplied
Jacobian or linear system functions, without using global data in the
program. The user data pointer may be specified through
:c:func:`MRIStepSetUserData()`.



.. c:function:: int MRIStepSetJacFn(void* arkode_mem, ARKLsJacFn jac)

   Specifies the Jacobian approximation routine to
   be used for the matrix-based solver with the ARKLS interface.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *jac* -- name of user-supplied Jacobian approximation function.

   **Return value:**
      * *ARKLS_SUCCESS*  if successful
      * *ARKLS_MEM_NULL*  if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** This routine must be called after the ARKLS linear
   solver interface has been initialized through a call to
   :c:func:`MRIStepSetLinearSolver()`.

   By default, ARKLS uses an internal difference quotient function for
   dense and band matrices.  If ``NULL`` is passed in for *jac*, this
   default is used. An error will occur if no *jac* is supplied when
   using other matrix types.

   The function type :c:func:`ARKLsJacFn()` is described in
   :numref:`ARKODE.Usage.UserSupplied`.


.. c:function:: int MRIStepSetLinSysFn(void* arkode_mem, ARKLsLinSysFn linsys)

   Specifies the linear system approximation routine to be used for the
   matrix-based solver with the ARKLS interface.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *linsys* -- name of user-supplied linear system approximation function.

   **Return value:**
      * *ARKLS_SUCCESS*  if successful
      * *ARKLS_MEM_NULL*  if the MRIStep memory was ``NULL``
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``

   **Notes:** This routine must be called after the ARKLS linear
   solver interface has been initialized through a call to
   :c:func:`MRIStepSetLinearSolver()`.

   By default, ARKLS uses an internal linear system function that leverages the
   SUNMATRIX API to form the system :math:`I - \gamma J`.  If ``NULL`` is passed
   in for *linsys*, this default is used.

   The function type :c:func:`ARKLsLinSysFn()` is described in
   :numref:`ARKODE.Usage.UserSupplied`.


.. c:function:: int MRIStepSetLinearSolutionScaling(void* arkode_mem, booleantype onoff)

   Enables or disables scaling the linear system solution to account for a
   change in :math:`\gamma` in the linear system. For more details see
   :numref:`SUNLinSol.Lagged_matrix`.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *onoff* -- flag to enable (``SUNTRUE``) or disable (``SUNFALSE``)
        scaling

   **Return value:**
      * *ARKLS_SUCCESS* if successful
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``
      * *ARKLS_ILL_INPUT* if the attached linear solver is not matrix-based

   **Notes:** Linear solution scaling is enabled by default when a matrix-based
   linear solver is attached.


.. _ARKODE.Usage.MRIStep.ARKLsInputs.MatrixFree:

Optional inputs for matrix-free ``SUNLinearSolver`` modules
===========================================================

.. cssclass:: table-bordered

==================================================  =========================================  ==================
Optional input                                      Function name                              Default
==================================================  =========================================  ==================
:math:`Jv` functions (*jtimes* and *jtsetup*)       :c:func:`MRIStepSetJacTimes()`             DQ,  none
:math:`Jv` DQ rhs function (*jtimesRhsFn*)          :c:func:`MRIStepSetJacTimesRhsFn()`        fs
==================================================  =========================================  ==================


As described in :numref:`ARKODE.Mathematics.Linear`, when solving
the Newton linear systems with matrix-free methods, the ARKLS
interface requires a *jtimes* function to compute an approximation to
the product between the Jacobian matrix
:math:`J(t,y)` and a vector :math:`v`. The user can supply a custom
Jacobian-times-vector approximation function, or use the default
internal difference quotient function that comes with the ARKLS
interface.

A user-defined Jacobian-vector function must be of type
:c:type:`ARKLsJacTimesVecFn` and can be specified through a call
to :c:func:`MRIStepSetJacTimes()` (see
:numref:`ARKODE.Usage.UserSupplied` for specification details).  As with the
user-supplied preconditioner functions, the evaluation and
processing of any Jacobian-related data needed by the user's
Jacobian-times-vector function is done in the optional user-supplied
function of type :c:type:`ARKLsJacTimesSetupFn` (see
:numref:`ARKODE.Usage.UserSupplied` for specification details).  As with
the preconditioner functions, a pointer to the user-defined
data structure, *user_data*, specified through
:c:func:`MRIStepSetUserData()` (or a ``NULL`` pointer otherwise) is
passed to the Jacobian-times-vector setup and product functions each
time they are called.


.. c:function:: int MRIStepSetJacTimes(void* arkode_mem, ARKLsJacTimesSetupFn jtsetup, ARKLsJacTimesVecFn jtimes)

   Specifies the Jacobian-times-vector setup and product functions.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *jtsetup* -- user-defined Jacobian-vector setup function.
        Pass ``NULL`` if no setup is necessary.
      * *jtimes* -- user-defined Jacobian-vector product function.

   **Return value:**
      * *ARKLS_SUCCESS* if successful.
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``.
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``.
      * *ARKLS_ILL_INPUT* if an input has an illegal value.
      * *ARKLS_SUNLS_FAIL* if an error occurred when setting up
        the Jacobian-vector product in the ``SUNLinearSolver``
        object used by the ARKLS interface.

   **Notes:** The default is to use an internal finite difference
   quotient for *jtimes* and to leave out *jtsetup*.  If ``NULL`` is
   passed to *jtimes*, these defaults are used.  A user may
   specify non-``NULL`` *jtimes* and ``NULL`` *jtsetup* inputs.

   This function must be called *after* the ARKLS system solver
   interface has been initialized through a call to
   :c:func:`MRIStepSetLinearSolver()`.

   The function types :c:type:`ARKLsJacTimesSetupFn` and
   :c:type:`ARKLsJacTimesVecFn` are described in
   :numref:`ARKODE.Usage.UserSupplied`.


When using the internal difference quotient the user may optionally supply
an alternative implicit right-hand side function for use in the Jacobian-vector
product approximation by calling :c:func:`MRIStepSetJacTimesRhsFn()`. The
alternative implicit right-hand side function should compute a suitable (and
differentiable) approximation to the :math:`f^I` function provided to
:c:func:`MRIStepCreate()`. For example, as done in :cite:p:`dorr2010numerical`, the alternative
function may use lagged values when evaluating a nonlinearity in :math:`f^I` to
avoid differencing a potentially non-differentiable factor.


.. c:function:: int MRIStepSetJacTimesRhsFn(void* arkode_mem, ARKRhsFn jtimesRhsFn)

   Specifies an alternative implicit right-hand side function for use in the
   internal Jacobian-vector product difference quotient approximation.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *jtimesRhsFn* -- the name of the C function (of type
        :c:func:`ARKRhsFn()`) defining the alternative right-hand side function.

   **Return value:**
      * *ARKLS_SUCCESS* if successful.
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``.
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``.
      * *ARKLS_ILL_INPUT* if an input has an illegal value.

   **Notes:** The default is to use the implicit right-hand side function
   provided to :c:func:`MRIStepCreate()` in the internal difference quotient. If
   the input implicit right-hand side function is ``NULL``, the default is used.

   This function must be called *after* the ARKLS system solver interface has
   been initialized through a call to :c:func:`MRIStepSetLinearSolver()`.





.. _ARKODE.Usage.MRIStep.ARKLsInputs.Iterative:

Optional inputs for iterative ``SUNLinearSolver`` modules
=========================================================

.. cssclass:: table-bordered

===============================================  =========================================  ==================
Optional input                                   Function name                              Default
===============================================  =========================================  ==================
Newton preconditioning functions                 :c:func:`MRIStepSetPreconditioner()`       ``NULL``, ``NULL``
Newton linear and nonlinear tolerance ratio      :c:func:`MRIStepSetEpsLin()`               0.05
Newton linear solve tolerance conversion factor  :c:func:`MRIStepSetLSNormFactor()`         vector length
===============================================  =========================================  ==================


As described in :numref:`ARKODE.Mathematics.Linear`, when using
an iterative linear solver the user may supply a preconditioning
operator to aid in solution of the system.  This operator consists of
two user-supplied functions, *psetup* and *psolve*, that are supplied
to MRIStep using the function :c:func:`MRIStepSetPreconditioner()`.
The *psetup* function supplied to these routines
should handle evaluation and preprocessing of any Jacobian data
needed by the user's preconditioner solve function,
*psolve*.  The user data pointer received through
:c:func:`MRIStepSetUserData()` (or a pointer to ``NULL`` if user data
was not specified) is passed to the *psetup* and *psolve* functions.
This allows the user to create an arbitrary
structure with relevant problem data and access it during the
execution of the user-supplied preconditioner functions without using
global data in the program.

Also, as described in :numref:`ARKODE.Mathematics.Error.Linear`, the
ARKLS interface requires that iterative linear solvers stop when
the norm of the preconditioned residual satisfies

.. math::
   \|r\| \le \frac{\epsilon_L \epsilon}{10}

where the default :math:`\epsilon_L = 0.05`, which may be modified by
the user through the :c:func:`MRIStepSetEpsLin()` function.


.. c:function:: int MRIStepSetPreconditioner(void* arkode_mem, ARKLsPrecSetupFn psetup, ARKLsPrecSolveFn psolve)

   Specifies the user-supplied preconditioner setup and solve functions.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *psetup* -- user defined preconditioner setup function.  Pass
        ``NULL`` if no setup is needed.
      * *psolve* -- user-defined preconditioner solve function.

   **Return value:**
      * *ARKLS_SUCCESS* if successful.
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``.
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``.
      * *ARKLS_ILL_INPUT* if an input has an illegal value.
      * *ARKLS_SUNLS_FAIL* if an error occurred when setting up
        preconditioning in the ``SUNLinearSolver`` object used
        by the ARKLS interface.

   **Notes:** The default is ``NULL`` for both arguments (i.e., no
   preconditioning).

   This function must be called *after* the ARKLS system solver
   interface has been initialized through a call to
   :c:func:`MRIStepSetLinearSolver()`.

   Both of the function types :c:func:`ARKLsPrecSetupFn()` and
   :c:func:`ARKLsPrecSolveFn()` are described in
   :numref:`ARKODE.Usage.UserSupplied`.


.. c:function:: int MRIStepSetEpsLin(void* arkode_mem, realtype eplifac)

   Specifies the factor by which the tolerance on the nonlinear
   iteration is multiplied to get a tolerance on the linear
   iteration.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *eplifac* -- linear convergence safety factor.

   **Return value:**
      * *ARKLS_SUCCESS* if successful.
      * *ARKLS_MEM_NULL* if the MRIStep memory was ``NULL``.
      * *ARKLS_LMEM_NULL* if the linear solver memory was ``NULL``.
      * *ARKLS_ILL_INPUT* if an input has an illegal value.

   **Notes:** Passing a value *eplifac* :math:`\le 0` indicates to use the
   default value of 0.05.

   This function must be called *after* the ARKLS system solver
   interface has been initialized through a call to
   :c:func:`MRIStepSetLinearSolver()`.


.. c:function:: int MRIStepSetLSNormFactor(void* arkode_mem, realtype nrmfac)

   Specifies the factor to use when converting from the integrator tolerance
   (WRMS norm) to the linear solver tolerance (L2 norm) for Newton linear system
   solves e.g., ``tol_L2 = fac * tol_WRMS``.

   **Arguments:**
      * *arkode_mem* -- pointer to the MRIStep memory block.
      * *nrmfac* -- the norm conversion factor. If *nrmfac* is:

        :math:`> 0` then the provided value is used.

        :math:`= 0` then the conversion factor is computed using the vector
        length i.e., ``nrmfac = sqrt(N_VGetLength(y))`` (*default*).

        :math:`< 0` then the conversion factor is computed using the vector dot
        product i.e., ``nrmfac = sqrt(N_VDotProd(v,v))`` where all the entries
        of ``v`` are one.

   **Return value:**
      * *ARK_SUCCESS* if successful.
      * *ARK_MEM_NULL* if the MRIStep memory was ``NULL``.

   **Notes:**
   This function must be called *after* the ARKLS system solver interface has
   been initialized through a call to :c:func:`MRIStepSetLinearSolver()`.
