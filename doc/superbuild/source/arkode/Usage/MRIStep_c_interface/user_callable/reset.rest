.. ----------------------------------------------------------------
   SUNDIALS Copyright Start
   Copyright (c) 2002-2021, Lawrence Livermore National Security
   and Southern Methodist University.
   All rights reserved.

   See the top-level LICENSE and NOTICE files for details.

   SPDX-License-Identifier: BSD-3-Clause
   SUNDIALS Copyright End
   ----------------------------------------------------------------

.. _ARKODE.Usage.MRIStep.Reset:

MRIStep reset function
----------------------

To reset the MRIStep module to a particular state :math:`(t_R,y(t_R))` for the
continued solution of a problem, where a prior
call to :c:func:`MRIStepCreate()` has been made, the user must call the function
:c:func:`MRIStepReset()`.  Like :c:func:`MRIStepReInit()` this routine retains
the current settings for all MRIStep module options and performs no memory
allocations but, unlike :c:func:`MRIStepReInit()`, this routine performs only a
*subset* of the input checking and initializations that are done in
:c:func:`MRIStepCreate()`. In particular this routine retains all internal
counter values and the step size/error history and does not reinitialize the
linear and/or nonlinear solver but it does indicate that a linear solver setup
is necessary in the next step. Following a successful call to
:c:func:`MRIStepReset()`, call :c:func:`MRIStepEvolve()` again to continue
solving the problem. By default the next call to :c:func:`MRIStepEvolve()` will
use the step size computed by MRIStep prior to calling :c:func:`MRIStepReset()`.
To set a different step size or have MRIStep estimate a new step size use
:c:func:`MRIStepSetInitStep()`.

One important use of the :c:func:`MRIStepReset()` function is in the
treating of jump discontinuities in the RHS functions.  Except in cases
of fairly small jumps, it is usually more efficient to stop at each
point of discontinuity and restart the integrator with a readjusted
ODE model, using a call to :c:func:`MRIStepReset()`.  To stop when
the location of the discontinuity is known, simply make that location
a value of ``tout``.  To stop when the location of the discontinuity
is determined by the solution, use the rootfinding feature.  In either
case, it is critical that the RHS functions *not* incorporate the
discontinuity, but rather have a smooth extension over the
discontinuity, so that the step across it (and subsequent rootfinding,
if used) can be done efficiently.  Then use a switch within the RHS
functions (communicated through ``user_data``) that can be flipped
between the stopping of the integration and the restart, so that the
restarted problem uses the new values (which have jumped).  Similar
comments apply if there is to be a jump in the dependent variable
vector.


.. c:function:: int MRIStepReset(void* arkode_mem, realtype tR, N_Vector yR)

   Resets the current MRIStep outer (slow) time-stepper module state to the
   provided independent variable value and dependent variable vector.

   **Arguments:**

   * *arkode_mem* -- pointer to the MRIStep memory block.

   * *tR* -- the value of the independent variable :math:`t`.

   * *yR* -- the value of the dependent variable vector :math:`y(t_R)`.

   **Return value:**

   * *ARK_SUCCESS* if successful

   * *ARK_MEM_NULL*  if the MRIStep memory was ``NULL``

   * *ARK_MEM_FAIL*  if a memory allocation failed

   * *ARK_ILL_INPUT* if an argument has an illegal value.

   **Notes:**
   If the inner (fast) stepper also needs to be reset, its reset function should
   be called before calling :c:func:`MRIStepReset()` to reset the outer stepper.

   All previously set options are retained but may be updated by calling the
   appropriate "Set" functions.

   If an error occurred, :c:func:`MRIStepReset()` also sends an error message to
   the error handler function.
