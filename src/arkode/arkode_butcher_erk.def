/*---------------------------------------------------------------
 * Programmer(s): Daniel R. Reynolds @ SMU
 *                Steven B. Roberts @ LLNL
 *---------------------------------------------------------------
 * SUNDIALS Copyright Start
 * Copyright (c) 2002-2023, Lawrence Livermore National Security
 * and Southern Methodist University.
 * All rights reserved.
 *
 * See the top-level LICENSE and NOTICE files for details.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * SUNDIALS Copyright End
 *---------------------------------------------------------------
 * This file defines diagonally explicit Butcher tables using
 * X-macros
 *--------------------------------------------------------------*/

/*
  When adding a new method, enter the coefficients below and add
  a new enum entry to include/arkode/arkode_butcher_erk.h

  Method names and properties are listed in the table
  below. Methods with an embedding have names are of the form
  <name>_s_p_q where s is the number of stages, p us the embedding
  order, and q is the method order. Similarly, fixed step methods
  have names of the form <name>_s_q.

  Methods in an ARK pair are marked with a *.

  Methods that satisfy the additional third order multirate
  infinitesimal step condition and are suppored by the MRIStep
  module (c_i > c_{i-1} and c_s != 1) are marked with a ^.

  The 'QP' column denotes whether the coefficients of the method
  are known precisely enough for use in quad precision (128-bit)
  calculations.

     imeth                              QP
    --------------------------------------
     ARKODE_HEUN_EULER_2_1_2             Y
     ARKODE_BOGACKI_SHAMPINE_4_2_3       Y
     ARKODE_ARK324L2SA_ERK_4_2_3*        N
     ARKODE_SHU_OSHER_3_2_3              Y
     ARKODE_SOFRONIOU_SPALETTA_5_3_4     Y
     ARKODE_ZONNEVELD_5_3_4              Y
     ARKODE_ARK436L2SA_ERK_6_3_4*        N
     ARKODE_ARK437L2SA_ERK_7_3_4*        N
     ARKODE_SAYFY_ABURUB_6_3_4           N
     ARKODE_CASH_KARP_6_4_5              Y
     ARKODE_FEHLBERG_6_4_5               Y
     ARKODE_DORMAND_PRINCE_7_4_5         Y
     ARKODE_ARK548L2SA_ERK_8_4_5*        N
     ARKODE_ARK548L2SAb_ERK_8_4_5*       N
     ARKODE_VERNER_8_5_6                 Y
     ARKODE_FEHLBERG_13_7_8              Y
     ARKODE_ARK2_ERK_3_1_2               Y
     ARKODE_VERNER_9_5_6                 Y
     ARKODE_VERNER_10_6_7                Y
     ARKODE_VERNER_13_7_8                Y
     ARKODE_VERNER_16_8_9                Y
    --------------------------------------
     ARKODE_KNOTH_WOLKE_3_3^             Y
    --------------------------------------
*/

ARK_BUTCHER_TABLE(ARKODE_ERK_NONE, {
    return NULL;
  })

ARK_BUTCHER_TABLE(ARKODE_HEUN_EULER_2_1_2, { /* Heun-Euler-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(2, SUNTRUE);
    B->q = 2;
    B->p = 1;

    B->A[1][0] = RCONST(1.0);

    B->b[0] = RCONST(1.0)/RCONST(2.0);
    B->b[1] = RCONST(1.0)/RCONST(2.0);

    B->d[0] = RCONST(1.0);

    B->c[1] = RCONST(1.0);
    return B;
 })

ARK_BUTCHER_TABLE(ARKODE_ARK2_ERK_3_1_2, { /* ARK2 Explicit Table */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(3, SUNTRUE);

    /* 1 - 1 / sqrt(2) */
    const sunrealtype gamma = SUN_RCONST(1.0) - SUN_RCONST(1.0) / SUNRsqrt(SUN_RCONST(2.0));
    /* (3 + 2 sqrt(2)) / 6 */
    const sunrealtype alpha = (SUN_RCONST(3.0) + SUN_RCONST(2.0) * SUNRsqrt(SUN_RCONST(2.0))) / SUN_RCONST(6.0);
    /* 1 / (2 sqrt(2)) */
    const sunrealtype delta = SUN_RCONST(1.0) / (SUN_RCONST(2.0) * SUNRsqrt(SUN_RCONST(2.0)));
    /* 2 - sqrt(2) */
    const sunrealtype twogamma = SUN_RCONST(2.0) - SUNRsqrt(SUN_RCONST(2.0));
    /* (4 - sqrt(2)) / 8 */
    const sunrealtype beta = (SUN_RCONST(4.0) - SUNRsqrt(SUN_RCONST(2.0))) / SUN_RCONST(8.0);

    B->q = 2;
    B->p = 1;

    B->A[1][0] = twogamma;
    B->A[2][0] = SUN_RCONST(1.0) - alpha;
    B->A[2][1] = alpha;

    B->b[0] = delta;
    B->b[1] = delta;
    B->b[2] = gamma;

    B->d[0] = beta;
    B->d[1] = beta;
    B->d[2] = SUN_RCONST(1.0) / (SUN_RCONST(2.0) * SUNRsqrt(SUN_RCONST(2.0)));

    B->c[1] = twogamma;
    B->c[2] = SUN_RCONST(1.0);

    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_BOGACKI_SHAMPINE_4_2_3, { /* Bogacki-Shampine-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(4, SUNTRUE);
    B->q = 3;
    B->p = 2;
    B->A[1][0] = RCONST(1.0)/RCONST(2.0);
    B->A[2][1] = RCONST(3.0)/RCONST(4.0);
    B->A[3][0] = RCONST(2.0)/RCONST(9.0);
    B->A[3][1] = RCONST(1.0)/RCONST(3.0);
    B->A[3][2] = RCONST(4.0)/RCONST(9.0);

    B->b[0] = RCONST(2.0)/RCONST(9.0);
    B->b[1] = RCONST(1.0)/RCONST(3.0);
    B->b[2] = RCONST(4.0)/RCONST(9.0);

    B->d[0] = RCONST(7.0)/RCONST(24.0);
    B->d[1] = RCONST(1.0)/RCONST(4.0);
    B->d[2] = RCONST(1.0)/RCONST(3.0);
    B->d[3] = RCONST(1.0)/RCONST(8.0);

    B->c[1] = RCONST(1.0)/RCONST(2.0);
    B->c[2] = RCONST(3.0)/RCONST(4.0);
    B->c[3] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ARK324L2SA_ERK_4_2_3, { /* ARK3(2)4L[2]SA-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(4, SUNTRUE);
    B->q = 3;
    B->p = 2;
    B->A[1][0] = RCONST(1767732205903.0)/RCONST(2027836641118.0);
    B->A[2][0] = RCONST(5535828885825.0)/RCONST(10492691773637.0);
    B->A[2][1] = RCONST(788022342437.0)/RCONST(10882634858940.0);
    B->A[3][0] = RCONST(6485989280629.0)/RCONST(16251701735622.0);
    B->A[3][1] = RCONST(-4246266847089.0)/RCONST(9704473918619.0);
    B->A[3][2] = RCONST(10755448449292.0)/RCONST(10357097424841.0);

    B->b[0] = RCONST(1471266399579.0)/RCONST(7840856788654.0);
    B->b[1] = RCONST(-4482444167858.0)/RCONST(7529755066697.0);
    B->b[2] = RCONST(11266239266428.0)/RCONST(11593286722821.0);
    B->b[3] = RCONST(1767732205903.0)/RCONST(4055673282236.0);

    B->d[0] = RCONST(2756255671327.0)/RCONST(12835298489170.0);
    B->d[1] = RCONST(-10771552573575.0)/RCONST(22201958757719.0);
    B->d[2] = RCONST(9247589265047.0)/RCONST(10645013368117.0);
    B->d[3] = RCONST(2193209047091.0)/RCONST(5459859503100.0);

    B->c[1] = RCONST(1767732205903.0)/RCONST(2027836641118.0);
    B->c[2] = RCONST(3.0)/RCONST(5.0);
    B->c[3] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_SHU_OSHER_3_2_3, { /* Shu-Osher-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(3, SUNTRUE);
    B->q = 3;
    B->p = 2;

    B->A[1][0] = RCONST(1.0);
    B->A[2][0] = RCONST(1.0)/RCONST(4.0);
    B->A[2][1] = RCONST(1.0)/RCONST(4.0);

    B->b[0] = RCONST(1.0)/RCONST(6.0);
    B->b[1] = RCONST(1.0)/RCONST(6.0);
    B->b[2] = RCONST(2.0)/RCONST(3.0);

    B->d[0] = RCONST(291485418878409.0)/RCONST(1.0e15);
    B->d[1] = RCONST(291485418878409.0)/RCONST(1.0e15);
    B->d[2] = RCONST(208514581121591.0)/RCONST(5.0e14);

    B->c[1] = RCONST(1.0);
    B->c[2] = RCONST(1.0)/RCONST(2.0);

    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_SOFRONIOU_SPALETTA_5_3_4, { /* Sofroniou-Spaletta-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(5, SUNTRUE);
    B->q = 4;
    B->p = 3;
    B->A[1][0] = RCONST(2.0) / RCONST(5.0);
    B->A[2][0] = RCONST(-3.0) / RCONST(20.0);
    B->A[2][1] = RCONST(3.0) / RCONST(4.0);
    B->A[3][0] = RCONST(19.0)/RCONST(44.0);
    B->A[3][1] = RCONST(-15.0)/RCONST(44.0);
    B->A[3][2] = RCONST(10.0)/RCONST(11.0);
    B->A[4][0] = RCONST(11.0)/RCONST(72.0);
    B->A[4][1] = RCONST(25.0)/RCONST(72.0);
    B->A[4][2] = RCONST(25.0)/RCONST(72.0);
    B->A[4][3] = RCONST(11.0)/RCONST(72.0);

    B->b[0] = RCONST(11.0)/RCONST(72.0);
    B->b[1] = RCONST(25.0)/RCONST(72.0);
    B->b[2] = RCONST(25.0)/RCONST(72.0);
    B->b[3] = RCONST(11.0)/RCONST(72.0);

    B->d[0] = RCONST(1251515.0)/RCONST(8970912.0);
    B->d[1] = RCONST(3710105.0)/RCONST(8970912.0);
    B->d[2] = RCONST(2519695.0)/RCONST(8970912.0);
    B->d[3] = RCONST(61105.0)/RCONST(8970912.0);
    B->d[4] = RCONST(119041.0)/RCONST(747576.0);

    B->c[1] = RCONST(2.0) / RCONST(5.0);
    B->c[2] = RCONST(3.0) / RCONST(5.0);
    B->c[3] = RCONST(1.0);
    B->c[4] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ZONNEVELD_5_3_4, { /* Zonneveld */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(5, SUNTRUE);
    B->q = 4;
    B->p = 3;
    B->A[1][0] = RCONST(0.5);
    B->A[2][1] = RCONST(0.5);
    B->A[3][2] = RCONST(1.0);
    B->A[4][0] = RCONST(5.0)/RCONST(32.0);
    B->A[4][1] = RCONST(7.0)/RCONST(32.0);
    B->A[4][2] = RCONST(13.0)/RCONST(32.0);
    B->A[4][3] = RCONST(-1.0)/RCONST(32.0);

    B->b[0] = RCONST(1.0)/RCONST(6.0);
    B->b[1] = RCONST(1.0)/RCONST(3.0);
    B->b[2] = RCONST(1.0)/RCONST(3.0);
    B->b[3] = RCONST(1.0)/RCONST(6.0);

    B->d[0] = RCONST(-1.0)/RCONST(2.0);
    B->d[1] = RCONST(7.0)/RCONST(3.0);
    B->d[2] = RCONST(7.0)/RCONST(3.0);
    B->d[3] = RCONST(13.0)/RCONST(6.0);
    B->d[4] = RCONST(-16.0)/RCONST(3.0);

    B->c[1] = RCONST(0.5);
    B->c[2] = RCONST(0.5);
    B->c[3] = RCONST(1.0);
    B->c[4] = RCONST(0.75);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ARK436L2SA_ERK_6_3_4, { /* ARK4(3)6L[2]SA-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(6, SUNTRUE);
    B->q = 4;
    B->p = 3;
    B->A[1][0] = RCONST(0.5);
    B->A[2][0] = RCONST(13861.0)/RCONST(62500.0);
    B->A[2][1] = RCONST(6889.0)/RCONST(62500.0);
    B->A[3][0] = RCONST(-116923316275.0)/RCONST(2393684061468.0);
    B->A[3][1] = RCONST(-2731218467317.0)/RCONST(15368042101831.0);
    B->A[3][2] = RCONST(9408046702089.0)/RCONST(11113171139209.0);
    B->A[4][0] = RCONST(-451086348788.0)/RCONST(2902428689909.0);
    B->A[4][1] = RCONST(-2682348792572.0)/RCONST(7519795681897.0);
    B->A[4][2] = RCONST(12662868775082.0)/RCONST(11960479115383.0);
    B->A[4][3] = RCONST(3355817975965.0)/RCONST(11060851509271.0);
    B->A[5][0] = RCONST(647845179188.0)/RCONST(3216320057751.0);
    B->A[5][1] = RCONST(73281519250.0)/RCONST(8382639484533.0);
    B->A[5][2] = RCONST(552539513391.0)/RCONST(3454668386233.0);
    B->A[5][3] = RCONST(3354512671639.0)/RCONST(8306763924573.0);
    B->A[5][4] = RCONST(4040.0)/RCONST(17871.0);

    B->b[0] = RCONST(82889.0)/RCONST(524892.0);
    B->b[2] = RCONST(15625.0)/RCONST(83664.0);
    B->b[3] = RCONST(69875.0)/RCONST(102672.0);
    B->b[4] = RCONST(-2260.0)/RCONST(8211.0);
    B->b[5] = RCONST(1.0)/RCONST(4.0);

    B->d[0] = RCONST(4586570599.0)/RCONST(29645900160.0);
    B->d[2] = RCONST(178811875.0)/RCONST(945068544.0);
    B->d[3] = RCONST(814220225.0)/RCONST(1159782912.0);
    B->d[4] = RCONST(-3700637.0)/RCONST(11593932.0);
    B->d[5] = RCONST(61727.0)/RCONST(225920.0);

    B->c[1] = RCONST(1.0)/RCONST(2.0);
    B->c[2] = RCONST(83.0)/RCONST(250.0);
    B->c[3] = RCONST(31.0)/RCONST(50.0);
    B->c[4] = RCONST(17.0)/RCONST(20.0);
    B->c[5] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ARK437L2SA_ERK_7_3_4, { /* ARK4(3)7L[2]SA-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(7, SUNTRUE);
    B->q = 4;
    B->p = 3;
    B->A[1][0] = RCONST(247.0)/RCONST(1000.0);
    B->A[2][0] = RCONST(247.0)/RCONST(4000.0);
    B->A[2][1] = RCONST(2694949928731.0)/RCONST(7487940209513.0);
    B->A[3][0] = RCONST(464650059369.0)/RCONST(8764239774964.0);
    B->A[3][1] = RCONST(878889893998.0)/RCONST(2444806327765.0);
    B->A[3][2] = RCONST(-952945855348.0)/RCONST(12294611323341.0);
    B->A[4][0] = RCONST(476636172619.0)/RCONST(8159180917465.0);
    B->A[4][1] = RCONST(-1271469283451.0)/RCONST(7793814740893.0);
    B->A[4][2] = RCONST(-859560642026.0)/RCONST(4356155882851.0);
    B->A[4][3] = RCONST(1723805262919.0)/RCONST(4571918432560.0);
    B->A[5][0] = RCONST(6338158500785.0)/RCONST(11769362343261.0);
    B->A[5][1] = RCONST(-4970555480458.0)/RCONST(10924838743837.0);
    B->A[5][2] = RCONST(3326578051521.0)/RCONST(2647936831840.0);
    B->A[5][3] = RCONST(-880713585975.0)/RCONST(1841400956686.0);
    B->A[5][4] = RCONST(-1428733748635.0)/RCONST(8843423958496.0);
    B->A[6][0] = RCONST(760814592956.0)/RCONST(3276306540349.0);
    B->A[6][1] = RCONST(760814592956.0)/RCONST(3276306540349.0);
    B->A[6][2] = RCONST(-47223648122716.0)/RCONST(6934462133451.0);
    B->A[6][3] = RCONST(71187472546993.0)/RCONST(9669769126921.0);
    B->A[6][4] = RCONST(-13330509492149.0)/RCONST(9695768672337.0);
    B->A[6][5] = RCONST(11565764226357.0)/RCONST(8513123442827.0);

    B->b[2] = RCONST(9164257142617.0)/RCONST(17756377923965.0);
    B->b[3] = RCONST(-10812980402763.0)/RCONST(74029279521829.0);
    B->b[4] = RCONST(1335994250573.0)/RCONST(5691609445217.0);
    B->b[5] = RCONST(2273837961795.0)/RCONST(8368240463276.0);
    B->b[6] = RCONST(247.0)/RCONST(2000.0);

    B->d[2] = RCONST(4469248916618.0)/RCONST(8635866897933.0);
    B->d[3] = RCONST(-621260224600.0)/RCONST(4094290005349.0);
    B->d[4] = RCONST(696572312987.0)/RCONST(2942599194819.0);
    B->d[5] = RCONST(1532940081127.0)/RCONST(5565293938103.0);
    B->d[6] = RCONST(2441.0)/RCONST(20000.0);

    B->c[1] = RCONST(247.0)/RCONST(1000.0);
    B->c[2] = RCONST(4276536705230.0)/RCONST(10142255878289.0);
    B->c[3] = RCONST(67.0)/RCONST(200.0);
    B->c[4] = RCONST(3.0)/RCONST(40.0);
    B->c[5] = RCONST(7.0)/RCONST(10.0);
    B->c[6] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_SAYFY_ABURUB_6_3_4, { /* Sayfy-Aburub-4-3-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(6, SUNTRUE);
    B->q = 4;
    B->p = 3;
    B->A[1][0] = RCONST(1.0)/RCONST(2.0);
    B->A[2][0] = RCONST(-1.0);
    B->A[2][1] = RCONST(2.0);
    B->A[3][0] = RCONST(1.0)/RCONST(6.0);
    B->A[3][1] = RCONST(2.0)/RCONST(3.0);
    B->A[3][2] = RCONST(1.0)/RCONST(6.0);
    B->A[4][0] = RCONST(0.137);
    B->A[4][1] = RCONST(0.226);
    B->A[4][2] = RCONST(0.137);
    B->A[5][0] = RCONST(0.452);
    B->A[5][1] = RCONST(-0.904);
    B->A[5][2] = RCONST(-0.548);
    B->A[5][4] = RCONST(2.0);

    B->b[0] = RCONST(1.0)/RCONST(6.0);
    B->b[1] = RCONST(1.0)/RCONST(3.0);
    B->b[2] = RCONST(1.0)/RCONST(12.0);
    B->b[3] = RCONST(0.0);
    B->b[4] = RCONST(1.0)/RCONST(3.0);
    B->b[5] = RCONST(1.0)/RCONST(12.0);

    B->d[0] = RCONST(1.0)/RCONST(6.0);
    B->d[1] = RCONST(2.0)/RCONST(3.0);
    B->d[2] = RCONST(1.0)/RCONST(6.0);

    B->c[1] = RCONST(1.0)/RCONST(2.0);
    B->c[2] = RCONST(1.0);
    B->c[3] = RCONST(1.0);
    B->c[4] = RCONST(1.0)/RCONST(2.0);
    B->c[5] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_CASH_KARP_6_4_5, { /* Cash-Karp-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(6, SUNTRUE);
    B->q = 5;
    B->p = 4;
    B->A[1][0] = RCONST(1.0)/RCONST(5.0);
    B->A[2][0] = RCONST(3.0)/RCONST(40.0);
    B->A[2][1] = RCONST(9.0)/RCONST(40.0);
    B->A[3][0] = RCONST(3.0)/RCONST(10.0);
    B->A[3][1] = RCONST(-9.0)/RCONST(10.0);
    B->A[3][2] = RCONST(6.0)/RCONST(5.0);
    B->A[4][0] = RCONST(-11.0)/RCONST(54.0);
    B->A[4][1] = RCONST(5.0)/RCONST(2.0);
    B->A[4][2] = RCONST(-70.0)/RCONST(27.0);
    B->A[4][3] = RCONST(35.0)/RCONST(27.0);
    B->A[5][0] = RCONST(1631.0)/RCONST(55296.0);
    B->A[5][1] = RCONST(175.0)/RCONST(512.0);
    B->A[5][2] = RCONST(575.0)/RCONST(13824.0);
    B->A[5][3] = RCONST(44275.0)/RCONST(110592.0);
    B->A[5][4] = RCONST(253.0)/RCONST(4096.0);

    B->b[0] = RCONST(37.0)/RCONST(378.0);
    B->b[2] = RCONST(250.0)/RCONST(621.0);
    B->b[3] = RCONST(125.0)/RCONST(594.0);
    B->b[5] = RCONST(512.0)/RCONST(1771.0);

    B->d[0] = RCONST(2825.0)/RCONST(27648.0);
    B->d[2] = RCONST(18575.0)/RCONST(48384.0);
    B->d[3] = RCONST(13525.0)/RCONST(55296.0);
    B->d[4] = RCONST(277.0)/RCONST(14336.0);
    B->d[5] = RCONST(1.0)/RCONST(4.0);

    B->c[1] = RCONST(1.0)/RCONST(5.0);
    B->c[2] = RCONST(3.0)/RCONST(10.0);
    B->c[3] = RCONST(3.0)/RCONST(5.0);
    B->c[4] = RCONST(1.0);
    B->c[5] = RCONST(7.0)/RCONST(8.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_FEHLBERG_6_4_5, { /* Fehlberg-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(6, SUNTRUE);
    B->q = 5;
    B->p = 4;
    B->A[1][0] = RCONST(1.0)/RCONST(4.0);
    B->A[2][0] = RCONST(3.0)/RCONST(32.0);
    B->A[2][1] = RCONST(9.0)/RCONST(32.0);
    B->A[3][0] = RCONST(1932.0)/RCONST(2197.0);
    B->A[3][1] = RCONST(-7200.0)/RCONST(2197.0);
    B->A[3][2] = RCONST(7296.0)/RCONST(2197.0);
    B->A[4][0] = RCONST(439.0)/RCONST(216.0);
    B->A[4][1] = RCONST(-8.0);
    B->A[4][2] = RCONST(3680.0)/RCONST(513.0);
    B->A[4][3] = RCONST(-845.0)/RCONST(4104.0);
    B->A[5][0] = RCONST(-8.0)/RCONST(27.0);
    B->A[5][1] = RCONST(2.0);
    B->A[5][2] = RCONST(-3544.0)/RCONST(2565.0);
    B->A[5][3] = RCONST(1859.0)/RCONST(4104.0);
    B->A[5][4] = RCONST(-11.0)/RCONST(40.0);

    B->b[0] = RCONST(16.0)/RCONST(135.0);
    B->b[2] = RCONST(6656.0)/RCONST(12825.0);
    B->b[3] = RCONST(28561.0)/RCONST(56430.0);
    B->b[4] = RCONST(-9.0)/RCONST(50.0);
    B->b[5] = RCONST(2.0)/RCONST(55.0);

    B->d[0] = RCONST(25.0)/RCONST(216.0);
    B->d[2] = RCONST(1408.0)/RCONST(2565.0);
    B->d[3] = RCONST(2197.0)/RCONST(4104.0);
    B->d[4] = RCONST(-1.0)/RCONST(5.0);

    B->c[1] = RCONST(1.0)/RCONST(4.0);
    B->c[2] = RCONST(3.0)/RCONST(8.0);
    B->c[3] = RCONST(12.0)/RCONST(13.0);
    B->c[4] = RCONST(1.0);
    B->c[5] = RCONST(1.0)/RCONST(2.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_DORMAND_PRINCE_7_4_5, { /* Dormand-Prince-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(7, SUNTRUE);
    B->q = 5;
    B->p = 4;
    B->A[1][0] = RCONST(1.0)/RCONST(5.0);
    B->A[2][0] = RCONST(3.0)/RCONST(40.0);
    B->A[2][1] = RCONST(9.0)/RCONST(40.0);
    B->A[3][0] = RCONST(44.0)/RCONST(45.0);
    B->A[3][1] = RCONST(-56.0)/RCONST(15.0);
    B->A[3][2] = RCONST(32.0)/RCONST(9.0);
    B->A[4][0] = RCONST(19372.0)/RCONST(6561.0);
    B->A[4][1] = RCONST(-25360.0)/RCONST(2187.0);
    B->A[4][2] = RCONST(64448.0)/RCONST(6561.0);
    B->A[4][3] = RCONST(-212.0)/RCONST(729.0);
    B->A[5][0] = RCONST(9017.0)/RCONST(3168.0);
    B->A[5][1] = RCONST(-355.0)/RCONST(33.0);
    B->A[5][2] = RCONST(46732.0)/RCONST(5247.0);
    B->A[5][3] = RCONST(49.0)/RCONST(176.0);
    B->A[5][4] = RCONST(-5103.0)/RCONST(18656.0);
    B->A[6][0] = RCONST(35.0)/RCONST(384.0);
    B->A[6][2] = RCONST(500.0)/RCONST(1113.0);
    B->A[6][3] = RCONST(125.0)/RCONST(192.0);
    B->A[6][4] = RCONST(-2187.0)/RCONST(6784.0);
    B->A[6][5] = RCONST(11.0)/RCONST(84.0);

    B->b[0] = RCONST(35.0)/RCONST(384.0);
    B->b[2] = RCONST(500.0)/RCONST(1113.0);
    B->b[3] = RCONST(125.0)/RCONST(192.0);
    B->b[4] = RCONST(-2187.0)/RCONST(6784.0);
    B->b[5] = RCONST(11.0)/RCONST(84.0);

    B->d[0] = RCONST(5179.0)/RCONST(57600.0);
    B->d[2] = RCONST(7571.0)/RCONST(16695.0);
    B->d[3] = RCONST(393.0)/RCONST(640.0);
    B->d[4] = RCONST(-92097.0)/RCONST(339200.0);
    B->d[5] = RCONST(187.0)/RCONST(2100.0);
    B->d[6] = RCONST(1.0)/RCONST(40.0);

    B->c[1] = RCONST(1.0)/RCONST(5.0);
    B->c[2] = RCONST(3.0)/RCONST(10.0);
    B->c[3] = RCONST(4.0)/RCONST(5.0);
    B->c[4] = RCONST(8.0)/RCONST(9.0);
    B->c[5] = RCONST(1.0);
    B->c[6] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ARK548L2SA_ERK_8_4_5, { /* ARK5(4)8L[2]SA-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(8, SUNTRUE);
    B->q = 5;
    B->p = 4;
    B->A[1][0] = RCONST(41.0)/RCONST(100.0);
    B->A[2][0] = RCONST(367902744464.0)/RCONST(2072280473677.0);
    B->A[2][1] = RCONST(677623207551.0)/RCONST(8224143866563.0);
    B->A[3][0] = RCONST(1268023523408.0)/RCONST(10340822734521.0);
    B->A[3][2] = RCONST(1029933939417.0)/RCONST(13636558850479.0);
    B->A[4][0] = RCONST(14463281900351.0)/RCONST(6315353703477.0);
    B->A[4][2] = RCONST(66114435211212.0)/RCONST(5879490589093.0);
    B->A[4][3] = RCONST(-54053170152839.0)/RCONST(4284798021562.0);
    B->A[5][0] = RCONST(14090043504691.0)/RCONST(34967701212078.0);
    B->A[5][2] = RCONST(15191511035443.0)/RCONST(11219624916014.0);
    B->A[5][3] = RCONST(-18461159152457.0)/RCONST(12425892160975.0);
    B->A[5][4] = RCONST(-281667163811.0)/RCONST(9011619295870.0);
    B->A[6][0] = RCONST(19230459214898.0)/RCONST(13134317526959.0);
    B->A[6][2] = RCONST(21275331358303.0)/RCONST(2942455364971.0);
    B->A[6][3] = RCONST(-38145345988419.0)/RCONST(4862620318723.0);
    B->A[6][4] = RCONST(-1.0)/RCONST(8.0);
    B->A[6][5] = RCONST(-1.0)/RCONST(8.0);
    B->A[7][0] = RCONST(-19977161125411.0)/RCONST(11928030595625.0);
    B->A[7][2] = RCONST(-40795976796054.0)/RCONST(6384907823539.0);
    B->A[7][3] = RCONST(177454434618887.0)/RCONST(12078138498510.0);
    B->A[7][4] = RCONST(782672205425.0)/RCONST(8267701900261.0);
    B->A[7][5] = RCONST(-69563011059811.0)/RCONST(9646580694205.0);
    B->A[7][6] = RCONST(7356628210526.0)/RCONST(4942186776405.0);

    B->b[0] = RCONST(-872700587467.0)/RCONST(9133579230613.0);
    B->b[3] = RCONST(22348218063261.0)/RCONST(9555858737531.0);
    B->b[4] = RCONST(-1143369518992.0)/RCONST(8141816002931.0);
    B->b[5] = RCONST(-39379526789629.0)/RCONST(19018526304540.0);
    B->b[6] = RCONST(32727382324388.0)/RCONST(42900044865799.0);
    B->b[7] = RCONST(41.0)/RCONST(200.0);

    B->d[0] = RCONST(-975461918565.0)/RCONST(9796059967033.0);
    B->d[3] = RCONST(78070527104295.0)/RCONST(32432590147079.0);
    B->d[4] = RCONST(-548382580838.0)/RCONST(3424219808633.0);
    B->d[5] = RCONST(-33438840321285.0)/RCONST(15594753105479.0);
    B->d[6] = RCONST(3629800801594.0)/RCONST(4656183773603.0);
    B->d[7] = RCONST(4035322873751.0)/RCONST(18575991585200.0);

    B->c[1] = RCONST(41.0)/RCONST(100.0);
    B->c[2] = RCONST(2935347310677.0)/RCONST(11292855782101.0);
    B->c[3] = RCONST(1426016391358.0)/RCONST(7196633302097.0);
    B->c[4] = RCONST(92.0)/RCONST(100.0);
    B->c[5] = RCONST(24.0)/RCONST(100.0);
    B->c[6] = RCONST(3.0)/RCONST(5.0);
    B->c[7] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ARK548L2SAb_ERK_8_4_5, { /* ARK5(4)8L[2]SAb-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(8, SUNTRUE);
    B->q = 5;
    B->p = 4;
    B->A[1][0] = RCONST(4.0)/RCONST(9.0);
    B->A[2][0] = RCONST(1.0)/RCONST(9.0);
    B->A[2][1] = RCONST(1183333538310.0)/RCONST(1827251437969.0);
    B->A[3][0] = RCONST(895379019517.0)/RCONST(9750411845327.0);
    B->A[3][1] = RCONST(477606656805.0)/RCONST(13473228687314.0);
    B->A[3][2] = RCONST(-112564739183.0)/RCONST(9373365219272.0);
    B->A[4][0] = RCONST(-4458043123994.0)/RCONST(13015289567637.0);
    B->A[4][1] = RCONST(-2500665203865.0)/RCONST(9342069639922.0);
    B->A[4][2] = RCONST(983347055801.0)/RCONST(8893519644487.0);
    B->A[4][3] = RCONST(2185051477207.0)/RCONST(2551468980502.0);
    B->A[5][0] = RCONST(-167316361917.0)/RCONST(17121522574472.0);
    B->A[5][1] = RCONST(1605541814917.0)/RCONST(7619724128744.0);
    B->A[5][2] = RCONST(991021770328.0)/RCONST(13052792161721.0);
    B->A[5][3] = RCONST(2342280609577.0)/RCONST(11279663441611.0);
    B->A[5][4] = RCONST(3012424348531.0)/RCONST(12792462456678.0);
    B->A[6][0] = RCONST(6680998715867.0)/RCONST(14310383562358.0);
    B->A[6][1] = RCONST(5029118570809.0)/RCONST(3897454228471.0);
    B->A[6][2] = RCONST(2415062538259.0)/RCONST(6382199904604.0);
    B->A[6][3] = RCONST(-3924368632305.0)/RCONST(6964820224454.0);
    B->A[6][4] = RCONST(-4331110370267.0)/RCONST(15021686902756.0);
    B->A[6][5] = RCONST(-3944303808049.0)/RCONST(11994238218192.0);
    B->A[7][0] = RCONST(2193717860234.0)/RCONST(3570523412979.0);
    B->A[7][1] = RCONST(2193717860234.0)/RCONST(3570523412979.0);
    B->A[7][2] = RCONST(5952760925747.0)/RCONST(18750164281544.0);
    B->A[7][3] = RCONST(-4412967128996.0)/RCONST(6196664114337.0);
    B->A[7][4] = RCONST(4151782504231.0)/RCONST(36106512998704.0);
    B->A[7][5] = RCONST(572599549169.0)/RCONST(6265429158920.0);
    B->A[7][6] = RCONST(-457874356192.0)/RCONST(11306498036315.0);

    B->b[2] = RCONST(3517720773327.0)/RCONST(20256071687669.0);
    B->b[3] = RCONST(4569610470461.0)/RCONST(17934693873752.0);
    B->b[4] = RCONST(2819471173109.0)/RCONST(11655438449929.0);
    B->b[5] = RCONST(3296210113763.0)/RCONST(10722700128969.0);
    B->b[6] = RCONST(-1142099968913.0)/RCONST(5710983926999.0);
    B->b[7] = RCONST(2.0)/RCONST(9.0);

    B->d[2] = RCONST(520639020421.0)/RCONST(8300446712847.0);
    B->d[3] = RCONST(4550235134915.0)/RCONST(17827758688493.0);
    B->d[4] = RCONST(1482366381361.0)/RCONST(6201654941325.0);
    B->d[5] = RCONST(5551607622171.0)/RCONST(13911031047899.0);
    B->d[6] = RCONST(-5266607656330.0)/RCONST(36788968843917.0);
    B->d[7] = RCONST(1074053359553.0)/RCONST(5740751784926.0);

    B->c[1] = RCONST(4.0)/RCONST(9.0);
    B->c[2] = RCONST(6456083330201.0)/RCONST(8509243623797.0);
    B->c[3] = RCONST(1632083962415.0)/RCONST(14158861528103.0);
    B->c[4] = RCONST(6365430648612.0)/RCONST(17842476412687.0);
    B->c[5] = RCONST(18.0)/RCONST(25.0);
    B->c[6] = RCONST(191.0)/RCONST(200.0);
    B->c[7] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_VERNER_8_5_6, { /* Verner-6-5 */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(8, SUNTRUE);
    B->q = 6;
    B->p = 5;
    B->A[1][0] = RCONST(1.0)/RCONST(6.0);
    B->A[2][0] = RCONST(4.0)/RCONST(75.0);
    B->A[2][1] = RCONST(16.0)/RCONST(75.0);
    B->A[3][0] = RCONST(5.0)/RCONST(6.0);
    B->A[3][1] = RCONST(-8.0)/RCONST(3.0);
    B->A[3][2] = RCONST(5.0)/RCONST(2.0);
    B->A[4][0] = RCONST(-165.0)/RCONST(64.0);
    B->A[4][1] = RCONST(55.0)/RCONST(6.0);
    B->A[4][2] = RCONST(-425.0)/RCONST(64.0);
    B->A[4][3] = RCONST(85.0)/RCONST(96.0);
    B->A[5][0] = RCONST(12.0)/RCONST(5.0);
    B->A[5][1] = RCONST(-8.0);
    B->A[5][2] = RCONST(4015.0)/RCONST(612.0);
    B->A[5][3] = RCONST(-11.0)/RCONST(36.0);
    B->A[5][4] = RCONST(88.0)/RCONST(255.0);
    B->A[6][0] = RCONST(-8263.0)/RCONST(15000.0);
    B->A[6][1] = RCONST(124.0)/RCONST(75.0);
    B->A[6][2] = RCONST(-643.0)/RCONST(680.0);
    B->A[6][3] = RCONST(-81.0)/RCONST(250.0);
    B->A[6][4] = RCONST(2484.0)/RCONST(10625.0);
    B->A[7][0] = RCONST(3501.0)/RCONST(1720.0);
    B->A[7][1] = RCONST(-300.0)/RCONST(43.0);
    B->A[7][2] = RCONST(297275.0)/RCONST(52632.0);
    B->A[7][3] = RCONST(-319.0)/RCONST(2322.0);
    B->A[7][4] = RCONST(24068.0)/RCONST(84065.0);
    B->A[7][6] = RCONST(3850.0)/RCONST(26703.0);

    B->b[0] = RCONST(3.0)/RCONST(40.0);
    B->b[2] = RCONST(875.0)/RCONST(2244.0);
    B->b[3] = RCONST(23.0)/RCONST(72.0);
    B->b[4] = RCONST(264.0)/RCONST(1955.0);
    B->b[6] = RCONST(125.0)/RCONST(11592.0);
    B->b[7] = RCONST(43.0)/RCONST(616.0);

    B->d[0] = RCONST(13.0)/RCONST(160.0);
    B->d[2] = RCONST(2375.0)/RCONST(5984.0);
    B->d[3] = RCONST(5.0)/RCONST(16.0);
    B->d[4] = RCONST(12.0)/RCONST(85.0);
    B->d[5] = RCONST(3.0)/RCONST(44.0);

    B->c[0] = RCONST(0.0);
    B->c[1] = RCONST(1.0)/RCONST(6.0);
    B->c[2] = RCONST(4.0)/RCONST(15.0);
    B->c[3] = RCONST(2.0)/RCONST(3.0);
    B->c[4] = RCONST(5.0)/RCONST(6.0);
    B->c[5] = RCONST(1.0);
    B->c[6] = RCONST(1.0)/RCONST(15.0);
    B->c[7] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_VERNER_9_5_6, { /* Verner-6-5b (DOI: 10.1007/s11075-009-9290-3) */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(9, SUNTRUE);
    B->q = 6;
    B->p = 5;

    B->A[1][0] =  RCONST(0.06);
    B->A[2][0] =  RCONST(0.01923996296296296218408805600574851268902);
    B->A[2][1] =  RCONST(0.07669337037037037008158080197972594760358);
    B->A[3][0] =  RCONST(0.035975);
    B->A[3][2] =  RCONST(0.107925);
    B->A[4][0] =  RCONST(1.318683415233148359391179837984964251518);
    B->A[4][2] =  RCONST(-5.042058063628561903612990136025473475456);
    B->A[4][3] =  RCONST(4.220674648395413619539340288611128926277);
    B->A[5][0] =  RCONST(-41.87259166432750845388000016100704669952);
    B->A[5][2] =  RCONST(159.432562163137475863550207577645778656);
    B->A[5][3] =  RCONST(-122.1192135650100425436903606168925762177);
    B->A[5][4] =  RCONST(5.531743066200053071668207849143072962761);
    B->A[6][0] =  RCONST(-54.43015693531650356362661113962531089783);
    B->A[6][2] =  RCONST(207.0672513650184782818541862070560455322);
    B->A[6][3] =  RCONST(-158.6108137845899932472093496471643447876);
    B->A[6][4] =  RCONST(6.99181658595024213553870140458457171917);
    B->A[6][5] =  RCONST(-0.01859723106220323093906721112489321967587);
    B->A[7][0] =  RCONST(-54.66374178728197819054912542924284934998);
    B->A[7][2] =  RCONST(207.9528062553893619224254507571458816528);
    B->A[7][3] =  RCONST(-159.2889574744995115906931459903717041016);
    B->A[7][4] =  RCONST(7.018743740796944408089075295720249414444);
    B->A[7][5] =  RCONST(-0.01833878590504572220210022237552038859576);
    B->A[7][6] =  RCONST(-0.000511948499788209866745436471546781831421);
    B->A[8][0] =  RCONST(0.0343895786835703570760713887466408777982);
    B->A[8][3] =  RCONST(0.2582624555633503682372520415810868144035);
    B->A[8][4] =  RCONST(0.4209371189673536961528554911637911573052);
    B->A[8][5] =  RCONST(4.405396469669310199890333024086430668831);
    B->A[8][6] =  RCONST(-176.4831190242986451721662888303399085999);
    B->A[8][7] =  RCONST(172.3641334014150743314530700445175170898);

    B->b[0] =  RCONST(0.0343895786835703570760713887466408777982);
    B->b[3] =  RCONST(0.2582624555633503682372520415810868144035);
    B->b[4] =  RCONST(0.4209371189673536961528554911637911573052);
    B->b[5] =  RCONST(4.405396469669310199890333024086430668831);
    B->b[6] =  RCONST(-176.4831190242986451721662888303399085999);
    B->b[7] =  RCONST(172.3641334014150743314530700445175170898);

    B->d[0] =  RCONST(0.04909967648382489863179145572757988702506);
    B->d[3] =  RCONST(0.2251112229516524232408869465871248394251);
    B->d[4] =  RCONST(0.4694682253029561769253064085205551236868);
    B->d[5] =  RCONST(0.806579224998886790132246460416354238987);
    B->d[7] =  RCONST(-0.607119489177795901291290192602900788188);
    B->d[8] =  RCONST(0.05686113944047568868889186433079885318875);

    B->c[1] =  RCONST(0.06);
    B->c[2] =  RCONST(0.09593333333333333333333333333333333333333);
    B->c[3] =  RCONST(0.1439);
    B->c[4] =  RCONST(0.4973);
    B->c[5] =  RCONST(0.9725);
    B->c[6] =  RCONST(0.9995);
    B->c[7] =  RCONST(1.0);
    B->c[8] =  RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_VERNER_10_6_7, { /* Verner-7-6 (DOI: 10.1007/s11075-009-9290-3) */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(10, SUNTRUE);
    B->q = 7;
    B->p = 6;

    B->A[1][0] =  RCONST(0.005);
    B->A[2][0] =  RCONST(-1.076790123456790123456790123456790123457);
    B->A[2][1] =  RCONST(1.185679012345679012345679012345679012346);
    B->A[3][0] =  RCONST(0.04083333333333333333333333333333333333333);
    B->A[3][2] =  RCONST(0.1225);
    B->A[4][0] =  RCONST(0.6389139236255726439495106205868069082499);
    B->A[4][2] =  RCONST(-2.45567263822365688952231721486896276474);
    B->A[4][3] =  RCONST(2.272258714598084150537715686368755996227);
    B->A[5][0] =  RCONST(-2.661577375018756796976049372460693120956);
    B->A[5][2] =  RCONST(10.80451388645613874928130826447159051895);
    B->A[5][3] =  RCONST(-8.353914657396199316963247838430106639862);
    B->A[5][4] =  RCONST(0.8204875949566569071080834874010179191828);
    B->A[6][0] =  RCONST(6.067741434696771740675558248767629265785);
    B->A[6][2] =  RCONST(-24.71127363591108760942915978375822305679);
    B->A[6][3] =  RCONST(20.42751793078889477328630164265632629395);
    B->A[6][4] =  RCONST(-1.906157978816647169395537275704555213451);
    B->A[6][5] =  RCONST(1.006172249242067939789535557792987674475);
    B->A[7][0] =  RCONST(12.05467007625320441377425595419481396675);
    B->A[7][2] =  RCONST(-49.75478495046898785858502378687262535095);
    B->A[7][3] =  RCONST(41.14288863860467415634047938510775566101);
    B->A[7][4] =  RCONST(-4.461760149974003830664059933042153716087);
    B->A[7][5] =  RCONST(2.042334822239175284863677006796933710575);
    B->A[7][6] =  RCONST(-0.0983484366540610666085342472797492519021);
    B->A[8][0] =  RCONST(10.13814652288180795380867493804544210434);
    B->A[8][2] =  RCONST(-42.64113603171750099818382295779883861542);
    B->A[8][3] =  RCONST(35.76384003992257021309342235326766967773);
    B->A[8][4] =  RCONST(-4.348022840392907539808220462873578071594);
    B->A[8][5] =  RCONST(2.009862268377035743327496675192378461361);
    B->A[8][6] =  RCONST(0.3487490460338271702767087845131754875183);
    B->A[8][7] =  RCONST(-0.2714390051048312657577810114162275567651);
    B->A[9][0] =  RCONST(-45.03007203429867644217665656469762325287);
    B->A[9][2] =  RCONST(187.3272437654588884470285847783088684082);
    B->A[9][3] =  RCONST(-154.0288236935018630902050063014030456543);
    B->A[9][4] =  RCONST(18.56465306347536170505918562412261962891);
    B->A[9][5] =  RCONST(-7.141809679295079149596858769655227661133);
    B->A[9][6] =  RCONST(1.3088085781613787439425777847645804286);

    B->b[0] =  RCONST(0.04715561848627222024665783806085528340191);
    B->b[3] =  RCONST(0.2575056429843415317648691598151344805956);
    B->b[4] =  RCONST(0.2621665397741262393260797125549288466573);
    B->b[5] =  RCONST(0.1521609265673855848621798259046045131981);
    B->b[6] =  RCONST(0.4939969170032484924171001239301403984427);
    B->b[7] =  RCONST(-0.2943031171403250323415079492406221106648);
    B->b[8] =  RCONST(0.08131747232495110944139327102675451897085);

    B->d[0] =  RCONST(0.04460860660634117375034080055229424033314);
    B->d[3] =  RCONST(0.2671640378571372709259890143584925681353);
    B->d[4] =  RCONST(0.2201018300177293163244485185714438557625);
    B->d[5] =  RCONST(0.2188431703143156881186115469972719438374);
    B->d[6] =  RCONST(0.2289871705411202773561285539472009986639);
    B->d[9] =  RCONST(0.02029518466335628046337546948052477091551);

    B->c[1] =  RCONST(0.005);
    B->c[2] =  RCONST(0.1088888888888888888888888888888888888889);
    B->c[3] =  RCONST(0.1633333333333333333333333333333333333333);
    B->c[4] =  RCONST(0.4555);
    B->c[5] =  RCONST(0.6095094489978380991601625282783061265945);
    B->c[6] =  RCONST(0.884);
    B->c[7] =  RCONST(0.925);
    B->c[8] =  RCONST(1.0);
    B->c[9] =  RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_VERNER_13_7_8, { /* Verner-8-7 (DOI: 10.1007/s11075-009-9290-3) */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(13, SUNTRUE);
    B->q = 8;
    B->p = 7;

    B->A[1][0] =  RCONST(0.05);
    B->A[2][0] =  RCONST(-0.006993164062499999597544153573380754096434);
    B->A[2][1] =  RCONST(0.1135556640625000057731597280508140102029);
    B->A[3][0] =  RCONST(0.0399609375);
    B->A[3][2] =  RCONST(0.1198828125);
    B->A[4][0] =  RCONST(0.3613975628004575391116759419674053788185);
    B->A[4][2] =  RCONST(-1.341524066700492845427561405813321471214);
    B->A[4][3] =  RCONST(1.370126503900035208616259296832140535116);
    B->A[5][0] =  RCONST(0.04904720279720279491053602782812959048897);
    B->A[5][3] =  RCONST(0.2350972042214404811311112553084967657924);
    B->A[5][4] =  RCONST(0.1808555929813567275665775468951324000955);
    B->A[6][0] =  RCONST(0.06169289044289043982827180911954201292247);
    B->A[6][3] =  RCONST(0.112365683146402772774052891691098921001);
    B->A[6][4] =  RCONST(-0.03885046071451366683779937716280983295292);
    B->A[6][5] =  RCONST(0.01979188712522046006414555563424073625356);
    B->A[7][0] =  RCONST(-1.767630240222326953869469434721395373344);
    B->A[7][3] =  RCONST(-62.5);
    B->A[7][4] =  RCONST(-6.061889377376669330033109872601926326752);
    B->A[7][5] =  RCONST(5.6508231982227634659921022830531001091);
    B->A[7][6] =  RCONST(65.6216964193762350987526588141918182373);
    B->A[8][0] =  RCONST(-1.180945066554970779293398663867264986038);
    B->A[8][3] =  RCONST(-41.50473441114321104805640061385929584503);
    B->A[8][4] =  RCONST(-4.434438319103724879255423729773610830307);
    B->A[8][5] =  RCONST(4.26040818858613334896290325559675693512);
    B->A[8][6] =  RCONST(43.75364022446171219371535698883235454559);
    B->A[8][7] =  RCONST(0.007871425489912309975126802896738809067756);
    B->A[9][0] =  RCONST(-1.281405999441488363643770753697026520967);
    B->A[9][3] =  RCONST(-45.04713996013986587740873801521956920624);
    B->A[9][4] =  RCONST(-4.731362069449575713520061981398612260818);
    B->A[9][5] =  RCONST(4.514967016593807613844546722248196601868);
    B->A[9][6] =  RCONST(47.4490955717298490412758837919682264328);
    B->A[9][7] =  RCONST(0.01059228297111661047658071055366235668771);
    B->A[9][8] =  RCONST(-0.005746842263844615696088968803678653785028);
    B->A[10][0] =  RCONST(-1.724470134262485077059068316884804517031);
    B->A[10][3] =  RCONST(-60.92349008483054007001555874012410640717);
    B->A[10][4] =  RCONST(-5.951518376222391992769189528189599514008);
    B->A[10][5] =  RCONST(5.55652373069845673114741657627746462822);
    B->A[10][6] =  RCONST(63.98301198033306036450085230171680450439);
    B->A[10][7] =  RCONST(0.01464202825041496271174512600055095390417);
    B->A[10][8] =  RCONST(0.06460408772358203211005900357122300192714);
    B->A[10][9] =  RCONST(-0.07930323169008879347074980614706873893738);
    B->A[11][0] =  RCONST(-3.30162266774707902072805154602974653244);
    B->A[11][3] =  RCONST(-118.0112723597525103969019255600869655609);
    B->A[11][4] =  RCONST(-10.14142238845611210251718148356303572655);
    B->A[11][5] =  RCONST(9.139311332232058049385159392841160297394);
    B->A[11][6] =  RCONST(123.3759428284042769519146531820297241211);
    B->A[11][7] =  RCONST(4.623244378874581173022306757047772407532);
    B->A[11][8] =  RCONST(-3.383277738068201756505004595965147018433);
    B->A[11][9] =  RCONST(4.527592100324618229478801367804408073425);
    B->A[11][10] =  RCONST(-5.828495485811623133542980212951079010963);
    B->A[12][0] =  RCONST(-3.039515033766308604867845133412629365921);
    B->A[12][3] =  RCONST(-109.260868089417627402326615992933511734);
    B->A[12][4] =  RCONST(-9.290642497400291688336437800899147987366);
    B->A[12][5] =  RCONST(8.43050498176491203139448771253228187561);
    B->A[12][6] =  RCONST(114.2010010378331372749016736634075641632);
    B->A[12][7] =  RCONST(-0.9637271342145479202656588313402608036995);
    B->A[12][8] =  RCONST(-5.034884088802189516798080148873850703239);
    B->A[12][9] =  RCONST(5.958130824002923375815043982584029436111);

    B->b[0] =  RCONST(0.04427989419007950788742533632103004492819);
    B->b[5] =  RCONST(0.3541049391724448991425333588267676532269);
    B->b[6] =  RCONST(0.2479692154956437688539949704136233776808);
    B->b[7] =  RCONST(-15.69420203883808540012978482991456985474);
    B->b[8] =  RCONST(25.08406496555856435293208051007241010666);
    B->b[9] =  RCONST(-31.73836778626027665950459777377545833588);
    B->b[10] =  RCONST(22.93828327398878386134128959383815526962);
    B->b[11] =  RCONST(-0.2361324633071542056228508954518474638462);

    B->d[0] =  RCONST(0.04431261522908979538781792939516890328377);
    B->d[5] =  RCONST(0.3546095642343226606030270886549260467291);
    B->d[6] =  RCONST(0.2478480431366653080615947146725375205278);
    B->d[7] =  RCONST(4.448134732475784502980786783155053853989);
    B->d[8] =  RCONST(19.8468863661187349123338208300992846489);
    B->d[9] =  RCONST(-23.58162337746561831863800762221217155457);
    B->d[12] =  RCONST(-0.3601679437289775354003040774841792881489);

    B->c[1] =  RCONST(0.05);
    B->c[2] =  RCONST(0.1065625);
    B->c[3] =  RCONST(0.15984375);
    B->c[4] =  RCONST(0.39);
    B->c[5] =  RCONST(0.465);
    B->c[6] =  RCONST(0.155);
    B->c[7] =  RCONST(0.943);
    B->c[8] =  RCONST(0.9018020417358569851273841777583584189415);
    B->c[9] =  RCONST(0.909);
    B->c[10] =  RCONST(0.94);
    B->c[11] =  RCONST(1.0);
    B->c[12] =  RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_VERNER_16_8_9, { /* Verner-9-8 (DOI: 10.1007/s11075-009-9290-3) */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(16, SUNTRUE);
    B->q = 9;
    B->p = 8;

    B->A[1][0] = RCONST(0.3462e-1);
    B->A[2][0] = RCONST(-0.389335438857287327017042687229284478532e-1);
    B->A[2][1] = RCONST(0.1359578945245091786499878854939346230295);
    B->A[3][0] = RCONST(0.3638413148954266723060635628912731569111e-1);
    B->A[3][2] = RCONST(0.1091523944686280016918190688673819470733);
    B->A[4][0] = RCONST(2.025763914393969636805657604282571047511);
    B->A[4][2] = RCONST(-7.638023836496292020387602153091964592952);
    B->A[4][3] = RCONST(6.173259922102322383581944548809393545442);
    B->A[5][0] = RCONST(0.5112275589406060872792270881648288397197e-1);
    B->A[5][3] = RCONST(0.1770823794555021537929910813839068684087);
    B->A[5][4] = RCONST(0.80277624092225014536138698108025283759e-3);
    B->A[6][0] = RCONST(0.1316006357975216279279871693164256985334);
    B->A[6][3] = RCONST(-0.2957276252669636417685183174672273730699);
    B->A[6][4] = RCONST(0.878137803564295237421124704053886667082e-1);
    B->A[6][5] = RCONST(0.6213052975225274774321435005639430026100);
    B->A[7][0] = RCONST(0.7166666666666666666666666666666666666667e-1);
    B->A[7][5] = RCONST(0.3305533578915319409260346730051472207728);
    B->A[7][6] = RCONST(0.2427799754418013924072986603281861125606);
    B->A[8][0] = RCONST(0.7180664062500000000000000000000000000000e-1);
    B->A[8][5] = RCONST(0.3294380283228177160744825466257672816401);
    B->A[8][6] = RCONST(0.1165190029271822839255174533742327183599);
    B->A[8][7] = RCONST(-0.3401367187500000000000000000000000000000e-1);
    B->A[9][0] = RCONST(0.4836757646340646986611287718844085773549e-1);
    B->A[9][5] = RCONST(0.3928989925676163974333190042057047002852e-1);
    B->A[9][6] = RCONST(0.1054740945890344608263649267140088017604);
    B->A[9][7] = RCONST(-0.2143865284648312665982642293830533996214e-1);
    B->A[9][8] = RCONST(-0.1041229174627194437759832813847147895623);
    B->A[10][0] = RCONST(-0.2664561487201478635337289243849737340534e-1);
    B->A[10][5] = RCONST(0.3333333333333333333333333333333333333333e-1);
    B->A[10][6] = RCONST(-0.1631072244872467239162704487554706387141);
    B->A[10][7] = RCONST(0.3396081684127761199487954930015522928244e-1);
    B->A[10][8] = RCONST(0.1572319413814626097110769806810024118077);
    B->A[10][9] = RCONST(0.2152267478031879552303534778794770376960);
    B->A[11][0] = RCONST(0.3689009248708622334786359863227633989718e-1);
    B->A[11][5] = RCONST(-0.1465181576725542928653609891758501156785);
    B->A[11][6] = RCONST(0.2242577768172024345345469822625833796001);
    B->A[11][7] = RCONST(0.2294405717066072637090897902753790803034e-1);
    B->A[11][8] = RCONST(-0.35850052905728761357394424889330334334e-2);
    B->A[11][9] = RCONST(0.8669223316444385506869203619044453906053e-1);
    B->A[11][10] = RCONST(0.4383840651968337846196219974168630120572);
    B->A[12][0] = RCONST(-0.4866012215113340846662212357570395295088);
    B->A[12][5] = RCONST(-6.304602650282852990657772792012007122988);
    B->A[12][6] = RCONST(-0.281245618289472564778284183790118418111);
    B->A[12][7] = RCONST(-2.679019236219849057687906597489223155566);
    B->A[12][8] = RCONST(0.518815663924157511565311164615012522024);
    B->A[12][9] = RCONST(1.365353187603341710683633635235238678626);
    B->A[12][10] = RCONST(5.885091088503946585721274891680604830712);
    B->A[12][11] = RCONST(2.802808786272062889819965117517532194812);
    B->A[13][0] = RCONST(0.4185367457753471441471025246471931649633);
    B->A[13][5] = RCONST(6.724547581906459363100870806514855026676);
    B->A[13][6] = RCONST(-0.425444280164611790606983409697113064616);
    B->A[13][7] = RCONST(3.343279153001265577811816947557982637749);
    B->A[13][8] = RCONST(0.617081663117537759528421117507709784737);
    B->A[13][9] = RCONST(-0.929966123939932833937749523988800852013);
    B->A[13][10] = RCONST(-6.099948804751010722472962837945508844846);
    B->A[13][11] = RCONST(-3.002206187889399044804158084895173690015);
    B->A[13][12] = RCONST(0.2553202529443445472336424602988558373637);
    B->A[14][0] = RCONST(-0.779374086122884664644623040843840506343);
    B->A[14][5] = RCONST(-13.93734253810777678786523664804936051203);
    B->A[14][6] = RCONST(1.252048853379357320949735183924200895136);
    B->A[14][7] = RCONST(-14.69150040801686878191527989293072091588);
    B->A[14][8] = RCONST(-0.494705058533141685655191992136962873577);
    B->A[14][9] = RCONST(2.242974909146236657906984549543692874755);
    B->A[14][10] = RCONST(13.36789380382864375813864978592679139881);
    B->A[14][11] = RCONST(14.39665048665068644512236935340272139005);
    B->A[14][12] = RCONST(-0.7975813331776800379127866056663258667437);
    B->A[14][13] = RCONST(0.4409353709534277758753793068298041158235);
    B->A[15][0] = RCONST(2.058051337466886442151242368989994043993);
    B->A[15][5] = RCONST(22.35793772796803295519317565842520212899);
    B->A[15][6] = RCONST(0.90949810997556332745009198137971890783);
    B->A[15][7] = RCONST(35.89110098240264104710550686568482456493);
    B->A[15][8] = RCONST(-3.442515027624453437985000403608480262211);
    B->A[15][9] = RCONST(-4.865481358036368826566013387928704014496);
    B->A[15][10] = RCONST(-18.90980381354342625688427480879773032857);
    B->A[15][11] = RCONST(-34.26354448030451782929251177395134170515);
    B->A[15][12] = RCONST(1.264756521695642578827783499806516664686);

    B->b[0] = RCONST(0.1461197685842315252051541915018784713459e-1);
    B->b[7] = RCONST(-0.3915211862331339089410228267288242030810);
    B->b[8] = RCONST(0.2310932500289506415909675644868993669908);
    B->b[9] = RCONST(0.1274766769992852382560589467488989175618);
    B->b[10] = RCONST(0.2246434176204157731566981937082069688984);
    B->b[11] = RCONST(0.5684352689748512932705226972873692126743);
    B->b[12] = RCONST(0.5825871557215827200814768021863420902155e-1);
    B->b[13] = RCONST(0.1364317403482215641609022744494239843327);
    B->b[14] = RCONST(0.3057013983082797397721005067920369646664e-1);

    B->d[0] = RCONST(0.1996996514886773085518508418098868756464e-1);
    B->d[7] = RCONST(2.191499304949330054530747099310837524864);
    B->d[8] = RCONST(0.8857071848208438030833722031786358862953e-1);
    B->d[9] = RCONST(0.1140560234865965622484956605091432032674);
    B->d[10] = RCONST(0.2533163805345107065564577734569651977347);
    B->d[11] = RCONST(-2.056564386240941011158999594595981300493);
    B->d[12] = RCONST(0.3408096799013119935160094894224543812830);
    B->d[15] = RCONST(0.4834231373823958314376726739772871714902e-1);

    B->c[1] = RCONST(0.3462e-1);
    B->c[2] = RCONST(0.9702435063878044594828361677100617517633e-1);
    B->c[3] = RCONST(0.1455365259581706689224254251565092627645);
    B->c[4] = RCONST(0.561);
    B->c[5] = RCONST(0.2290079115904850126662751771814700052182);
    B->c[6] = RCONST(0.5449920884095149873337248228185299947818);
    B->c[7] = RCONST(0.645);
    B->c[8] = RCONST(0.48375);
    B->c[9] = RCONST(0.6757e-1);
    B->c[10] = RCONST(0.25);
    B->c[11] = RCONST(0.6590650618730998549405331618649220295334);
    B->c[12] = RCONST(0.8206);
    B->c[13] = RCONST(0.9012);
    B->c[14] = RCONST(1.0);
    B->c[15] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_FEHLBERG_13_7_8, { /* Fehlberg-8-7 */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(13, SUNTRUE);
    B->q = 8;
    B->p = 7;
    B->A[1][0] = RCONST(2.0)/RCONST(27.0);
    B->A[2][0] = RCONST(1.0)/RCONST(36.0);
    B->A[2][1] = RCONST(1.0)/RCONST(12.0);
    B->A[3][0] = RCONST(1.0)/RCONST(24.0);
    B->A[3][2] = RCONST(1.0)/RCONST(8.0);
    B->A[4][0] = RCONST(5.0)/RCONST(12.0);
    B->A[4][2] = RCONST(-25.0)/RCONST(16.0);
    B->A[4][3] = RCONST(25.0)/RCONST(16.0);
    B->A[5][0] = RCONST(1.0)/RCONST(20.0);
    B->A[5][3] = RCONST(1.0)/RCONST(4.0);
    B->A[5][4] = RCONST(1.0)/RCONST(5.0);
    B->A[6][0] = RCONST(-25.0)/RCONST(108.0);
    B->A[6][3] = RCONST(125.0)/RCONST(108.0);
    B->A[6][4] = RCONST(-65.0)/RCONST(27.0);
    B->A[6][5] = RCONST(125.0)/RCONST(54.0);
    B->A[7][0] = RCONST(31.0)/RCONST(300.0);
    B->A[7][4] = RCONST(61.0)/RCONST(225.0);
    B->A[7][5] = RCONST(-2.0)/RCONST(9.0);
    B->A[7][6] = RCONST(13.0)/RCONST(900.0);
    B->A[8][0] = RCONST(2.0);
    B->A[8][3] = RCONST(-53.0)/RCONST(6.0);
    B->A[8][4] = RCONST(704.0)/RCONST(45.0);
    B->A[8][5] = RCONST(-107.0)/RCONST(9.0);
    B->A[8][6] = RCONST(67.0)/RCONST(90.0);
    B->A[8][7] = RCONST(3.0);
    B->A[9][0] = RCONST(-91.0)/RCONST(108.0);
    B->A[9][3] = RCONST(23.0)/RCONST(108.0);
    B->A[9][4] = RCONST(-976.0)/RCONST(135.0);
    B->A[9][5] = RCONST(311.0)/RCONST(54.0);
    B->A[9][6] = RCONST(-19.0)/RCONST(60.0);
    B->A[9][7] = RCONST(17.0)/RCONST(6.0);
    B->A[9][8] = RCONST(-1.0)/RCONST(12.0);
    B->A[10][0] = RCONST(2383.0)/RCONST(4100.0);
    B->A[10][3] = RCONST(-341.0)/RCONST(164.0);
    B->A[10][4] = RCONST(4496.0)/RCONST(1025.0);
    B->A[10][5] = RCONST(-301.0)/RCONST(82.0);
    B->A[10][6] = RCONST(2133.0)/RCONST(4100.0);
    B->A[10][7] = RCONST(45.0)/RCONST(82.0);
    B->A[10][8] = RCONST(45.0)/RCONST(164.0);
    B->A[10][9] = RCONST(18.0)/RCONST(41.0);
    B->A[11][0] = RCONST(3.0)/RCONST(205.0);
    B->A[11][5] = RCONST(-6.0)/RCONST(41.0);
    B->A[11][6] = RCONST(-3.0)/RCONST(205.0);
    B->A[11][7] = RCONST(-3.0)/RCONST(41.0);
    B->A[11][8] = RCONST(3.0)/RCONST(41.0);
    B->A[11][9] = RCONST(6.0)/RCONST(41.0);
    B->A[12][0] = RCONST(-1777.0)/RCONST(4100.0);
    B->A[12][3] = RCONST(-341.0)/RCONST(164.0);
    B->A[12][4] = RCONST(4496.0)/RCONST(1025.0);
    B->A[12][5] = RCONST(-289.0)/RCONST(82.0);
    B->A[12][6] = RCONST(2193.0)/RCONST(4100.0);
    B->A[12][7] = RCONST(51.0)/RCONST(82.0);
    B->A[12][8] = RCONST(33.0)/RCONST(164.0);
    B->A[12][9] = RCONST(12.0)/RCONST(41.0);
    B->A[12][11] = RCONST(1.0);

    B->b[5]  = RCONST(34.0)/RCONST(105.0);
    B->b[6]  = RCONST(9.0)/RCONST(35.0);
    B->b[7]  = RCONST(9.0)/RCONST(35.0);
    B->b[8]  = RCONST(9.0)/RCONST(280.0);
    B->b[9]  = RCONST(9.0)/RCONST(280.0);
    B->b[11] = RCONST(41.0)/RCONST(840.0);
    B->b[12] = RCONST(41.0)/RCONST(840.0);

    B->d[0]  = RCONST(41.0)/RCONST(840.0);
    B->d[5]  = RCONST(34.0)/RCONST(105.0);
    B->d[6]  = RCONST(9.0)/RCONST(35.0);
    B->d[7]  = RCONST(9.0)/RCONST(35.0);
    B->d[8]  = RCONST(9.0)/RCONST(280.0);
    B->d[9]  = RCONST(9.0)/RCONST(280.0);
    B->d[10] = RCONST(41.0)/RCONST(840.0);

    B->c[1]  = RCONST(2.0)/RCONST(27.0);
    B->c[2]  = RCONST(1.0)/RCONST(9.0);
    B->c[3]  = RCONST(1.0)/RCONST(6.0);
    B->c[4]  = RCONST(5.0)/RCONST(12.0);
    B->c[5]  = RCONST(1.0)/RCONST(2.0);
    B->c[6]  = RCONST(5.0)/RCONST(6.0);
    B->c[7]  = RCONST(1.0)/RCONST(6.0);
    B->c[8]  = RCONST(2.0)/RCONST(3.0);
    B->c[9]  = RCONST(1.0)/RCONST(3.0);
    B->c[10] = RCONST(1.0);
    B->c[12] = RCONST(1.0);
    return B;
  })

/* ==========================================================
 * FIXED STEP METHODS
 * ========================================================*/

ARK_BUTCHER_TABLE(ARKODE_KNOTH_WOLKE_3_3, { /* Knoth-Wolke-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(3, SUNFALSE);
    B->q = 3;
    B->p = 0;
    B->A[1][0] = RCONST(1.0)/RCONST(3.0);
    B->A[2][0] = RCONST(-3.0)/RCONST(16.0);
    B->A[2][1] = RCONST(15.0)/RCONST(16.0);

    B->b[0] = RCONST(1.0)/RCONST(6.0);
    B->b[1] = RCONST(3.0)/RCONST(10.0);
    B->b[2] = RCONST(8.0)/RCONST(15.0);

    B->d = NULL;

    B->c[1] = RCONST(1.0)/RCONST(3.0);
    B->c[2] = RCONST(3.0)/RCONST(4.0);
    return B;
  })
