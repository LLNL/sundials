/*---------------------------------------------------------------
 * Programmer(s): Daniel R. Reynolds @ SMU
 *                Steven B. Roberts @ LLNL
 *---------------------------------------------------------------
 * SUNDIALS Copyright Start
 * Copyright (c) 2002-2023, Lawrence Livermore National Security
 * and Southern Methodist University.
 * All rights reserved.
 *
 * See the top-level LICENSE and NOTICE files for details.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * SUNDIALS Copyright End
 *---------------------------------------------------------------
 * This file defines diagonally explicit Butcher tables using
 * X-macros
 *--------------------------------------------------------------*/

/*
  When adding a new method, enter the coefficients below and add
  a new enum entry to include/arkode/arkode_butcher_erk.h

  Method names and properties are listed in the table
  below. Methods with an embedding have names are of the form
  <name>_s_p_q where s is the number of stages, p us the embedding
  order, and q is the method order. Similarly, fixed step methods
  have names of the form <name>_s_q.

  Methods in an ARK pair are marked with a *.

  Methods that satisfy the additional third order multirate
  infinitesimal step condition and are suppored by the MRIStep
  module (c_i > c_{i-1} and c_s != 1) are marked with a ^.

  The 'QP' column denotes whether the coefficients of the method
  are known precisely enough for use in quad precision (128-bit)
  calculations.

     imeth                              QP
    --------------------------------------
     ARKODE_HEUN_EULER_2_1_2             Y
     ARKODE_BOGACKI_SHAMPINE_4_2_3       Y
     ARKODE_ARK324L2SA_ERK_4_2_3*        N
     ARKODE_SHU_OSHER_3_2_3              Y
     ARKODE_SOFRONIOU_SPALETTA_5_3_4     Y
     ARKODE_ZONNEVELD_5_3_4              Y
     ARKODE_ARK436L2SA_ERK_6_3_4*        N
     ARKODE_ARK437L2SA_ERK_7_3_4*        N
     ARKODE_SAYFY_ABURUB_6_3_4           N
     ARKODE_CASH_KARP_6_4_5              Y
     ARKODE_FEHLBERG_6_4_5               Y
     ARKODE_DORMAND_PRINCE_7_4_5         Y
     ARKODE_ARK548L2SA_ERK_8_4_5*        N
     ARKODE_ARK548L2SAb_ERK_8_4_5*       N
     ARKODE_VERNER_8_5_6                 Y
     ARKODE_FEHLBERG_13_7_8              Y
     ARKODE_ARK2_ERK_3_1_2               Y
     ARKODE_VERNER_9_5_6                 Y
     ARKODE_VERNER_10_6_7                Y
     ARKODE_VERNER_13_7_8                Y
     ARKODE_VERNER_16_8_9                Y
    --------------------------------------
     ARKODE_KNOTH_WOLKE_3_3^             Y
    --------------------------------------
*/

ARK_BUTCHER_TABLE(ARKODE_ERK_NONE, {
    return NULL;
  })

ARK_BUTCHER_TABLE(ARKODE_HEUN_EULER_2_1_2, { /* Heun-Euler-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(2, SUNTRUE);
    B->q = 2;
    B->p = 1;

    B->A[1][0] = RCONST(1.0);

    B->b[0] = RCONST(1.0)/RCONST(2.0);
    B->b[1] = RCONST(1.0)/RCONST(2.0);

    B->d[0] = RCONST(1.0);

    B->c[1] = RCONST(1.0);
    return B;
 })

ARK_BUTCHER_TABLE(ARKODE_ARK2_ERK_3_1_2, { /* ARK2 Explicit Table */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(3, SUNTRUE);

    /* 1 - 1 / sqrt(2) */
    const sunrealtype gamma = SUN_RCONST(1.0) - SUN_RCONST(1.0) / SUNRsqrt(SUN_RCONST(2.0));
    /* (3 + 2 sqrt(2)) / 6 */
    const sunrealtype alpha = (SUN_RCONST(3.0) + SUN_RCONST(2.0) * SUNRsqrt(SUN_RCONST(2.0))) / SUN_RCONST(6.0);
    /* 1 / (2 sqrt(2)) */
    const sunrealtype delta = SUN_RCONST(1.0) / (SUN_RCONST(2.0) * SUNRsqrt(SUN_RCONST(2.0)));
    /* 2 - sqrt(2) */
    const sunrealtype twogamma = SUN_RCONST(2.0) - SUNRsqrt(SUN_RCONST(2.0));
    /* (4 - sqrt(2)) / 8 */
    const sunrealtype beta = (SUN_RCONST(4.0) - SUNRsqrt(SUN_RCONST(2.0))) / SUN_RCONST(8.0);

    B->q = 2;
    B->p = 1;

    B->A[1][0] = twogamma;
    B->A[2][0] = SUN_RCONST(1.0) - alpha;
    B->A[2][1] = alpha;

    B->b[0] = delta;
    B->b[1] = delta;
    B->b[2] = gamma;

    B->d[0] = beta;
    B->d[1] = beta;
    B->d[2] = SUN_RCONST(1.0) / (SUN_RCONST(2.0) * SUNRsqrt(SUN_RCONST(2.0)));

    B->c[1] = twogamma;
    B->c[2] = SUN_RCONST(1.0);

    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_BOGACKI_SHAMPINE_4_2_3, { /* Bogacki-Shampine-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(4, SUNTRUE);
    B->q = 3;
    B->p = 2;
    B->A[1][0] = RCONST(1.0)/RCONST(2.0);
    B->A[2][1] = RCONST(3.0)/RCONST(4.0);
    B->A[3][0] = RCONST(2.0)/RCONST(9.0);
    B->A[3][1] = RCONST(1.0)/RCONST(3.0);
    B->A[3][2] = RCONST(4.0)/RCONST(9.0);

    B->b[0] = RCONST(2.0)/RCONST(9.0);
    B->b[1] = RCONST(1.0)/RCONST(3.0);
    B->b[2] = RCONST(4.0)/RCONST(9.0);

    B->d[0] = RCONST(7.0)/RCONST(24.0);
    B->d[1] = RCONST(1.0)/RCONST(4.0);
    B->d[2] = RCONST(1.0)/RCONST(3.0);
    B->d[3] = RCONST(1.0)/RCONST(8.0);

    B->c[1] = RCONST(1.0)/RCONST(2.0);
    B->c[2] = RCONST(3.0)/RCONST(4.0);
    B->c[3] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ARK324L2SA_ERK_4_2_3, { /* ARK3(2)4L[2]SA-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(4, SUNTRUE);
    B->q = 3;
    B->p = 2;
    B->A[1][0] = RCONST(1767732205903.0)/RCONST(2027836641118.0);
    B->A[2][0] = RCONST(5535828885825.0)/RCONST(10492691773637.0);
    B->A[2][1] = RCONST(788022342437.0)/RCONST(10882634858940.0);
    B->A[3][0] = RCONST(6485989280629.0)/RCONST(16251701735622.0);
    B->A[3][1] = RCONST(-4246266847089.0)/RCONST(9704473918619.0);
    B->A[3][2] = RCONST(10755448449292.0)/RCONST(10357097424841.0);

    B->b[0] = RCONST(1471266399579.0)/RCONST(7840856788654.0);
    B->b[1] = RCONST(-4482444167858.0)/RCONST(7529755066697.0);
    B->b[2] = RCONST(11266239266428.0)/RCONST(11593286722821.0);
    B->b[3] = RCONST(1767732205903.0)/RCONST(4055673282236.0);

    B->d[0] = RCONST(2756255671327.0)/RCONST(12835298489170.0);
    B->d[1] = RCONST(-10771552573575.0)/RCONST(22201958757719.0);
    B->d[2] = RCONST(9247589265047.0)/RCONST(10645013368117.0);
    B->d[3] = RCONST(2193209047091.0)/RCONST(5459859503100.0);

    B->c[1] = RCONST(1767732205903.0)/RCONST(2027836641118.0);
    B->c[2] = RCONST(3.0)/RCONST(5.0);
    B->c[3] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_SHU_OSHER_3_2_3, { /* Shu-Osher-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(3, SUNTRUE);
    B->q = 3;
    B->p = 2;

    B->A[1][0] = RCONST(1.0);
    B->A[2][0] = RCONST(1.0)/RCONST(4.0);
    B->A[2][1] = RCONST(1.0)/RCONST(4.0);

    B->b[0] = RCONST(1.0)/RCONST(6.0);
    B->b[1] = RCONST(1.0)/RCONST(6.0);
    B->b[2] = RCONST(2.0)/RCONST(3.0);

    B->d[0] = RCONST(291485418878409.0)/RCONST(1.0e15);
    B->d[1] = RCONST(291485418878409.0)/RCONST(1.0e15);
    B->d[2] = RCONST(208514581121591.0)/RCONST(5.0e14);

    B->c[1] = RCONST(1.0);
    B->c[2] = RCONST(1.0)/RCONST(2.0);

    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_SOFRONIOU_SPALETTA_5_3_4, { /* Sofroniou-Spaletta-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(5, SUNTRUE);
    B->q = 4;
    B->p = 3;
    B->A[1][0] = RCONST(2.0) / RCONST(5.0);
    B->A[2][0] = RCONST(-3.0) / RCONST(20.0);
    B->A[2][1] = RCONST(3.0) / RCONST(4.0);
    B->A[3][0] = RCONST(19.0)/RCONST(44.0);
    B->A[3][1] = RCONST(-15.0)/RCONST(44.0);
    B->A[3][2] = RCONST(10.0)/RCONST(11.0);
    B->A[4][0] = RCONST(11.0)/RCONST(72.0);
    B->A[4][1] = RCONST(25.0)/RCONST(72.0);
    B->A[4][2] = RCONST(25.0)/RCONST(72.0);
    B->A[4][3] = RCONST(11.0)/RCONST(72.0);

    B->b[0] = RCONST(11.0)/RCONST(72.0);
    B->b[1] = RCONST(25.0)/RCONST(72.0);
    B->b[2] = RCONST(25.0)/RCONST(72.0);
    B->b[3] = RCONST(11.0)/RCONST(72.0);

    B->d[0] = RCONST(1251515.0)/RCONST(8970912.0);
    B->d[1] = RCONST(3710105.0)/RCONST(8970912.0);
    B->d[2] = RCONST(2519695.0)/RCONST(8970912.0);
    B->d[3] = RCONST(61105.0)/RCONST(8970912.0);
    B->d[4] = RCONST(119041.0)/RCONST(747576.0);

    B->c[1] = RCONST(2.0) / RCONST(5.0);
    B->c[2] = RCONST(3.0) / RCONST(5.0);
    B->c[3] = RCONST(1.0);
    B->c[4] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ZONNEVELD_5_3_4, { /* Zonneveld */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(5, SUNTRUE);
    B->q = 4;
    B->p = 3;
    B->A[1][0] = RCONST(0.5);
    B->A[2][1] = RCONST(0.5);
    B->A[3][2] = RCONST(1.0);
    B->A[4][0] = RCONST(5.0)/RCONST(32.0);
    B->A[4][1] = RCONST(7.0)/RCONST(32.0);
    B->A[4][2] = RCONST(13.0)/RCONST(32.0);
    B->A[4][3] = RCONST(-1.0)/RCONST(32.0);

    B->b[0] = RCONST(1.0)/RCONST(6.0);
    B->b[1] = RCONST(1.0)/RCONST(3.0);
    B->b[2] = RCONST(1.0)/RCONST(3.0);
    B->b[3] = RCONST(1.0)/RCONST(6.0);

    B->d[0] = RCONST(-1.0)/RCONST(2.0);
    B->d[1] = RCONST(7.0)/RCONST(3.0);
    B->d[2] = RCONST(7.0)/RCONST(3.0);
    B->d[3] = RCONST(13.0)/RCONST(6.0);
    B->d[4] = RCONST(-16.0)/RCONST(3.0);

    B->c[1] = RCONST(0.5);
    B->c[2] = RCONST(0.5);
    B->c[3] = RCONST(1.0);
    B->c[4] = RCONST(0.75);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ARK436L2SA_ERK_6_3_4, { /* ARK4(3)6L[2]SA-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(6, SUNTRUE);
    B->q = 4;
    B->p = 3;
    B->A[1][0] = RCONST(0.5);
    B->A[2][0] = RCONST(13861.0)/RCONST(62500.0);
    B->A[2][1] = RCONST(6889.0)/RCONST(62500.0);
    B->A[3][0] = RCONST(-116923316275.0)/RCONST(2393684061468.0);
    B->A[3][1] = RCONST(-2731218467317.0)/RCONST(15368042101831.0);
    B->A[3][2] = RCONST(9408046702089.0)/RCONST(11113171139209.0);
    B->A[4][0] = RCONST(-451086348788.0)/RCONST(2902428689909.0);
    B->A[4][1] = RCONST(-2682348792572.0)/RCONST(7519795681897.0);
    B->A[4][2] = RCONST(12662868775082.0)/RCONST(11960479115383.0);
    B->A[4][3] = RCONST(3355817975965.0)/RCONST(11060851509271.0);
    B->A[5][0] = RCONST(647845179188.0)/RCONST(3216320057751.0);
    B->A[5][1] = RCONST(73281519250.0)/RCONST(8382639484533.0);
    B->A[5][2] = RCONST(552539513391.0)/RCONST(3454668386233.0);
    B->A[5][3] = RCONST(3354512671639.0)/RCONST(8306763924573.0);
    B->A[5][4] = RCONST(4040.0)/RCONST(17871.0);

    B->b[0] = RCONST(82889.0)/RCONST(524892.0);
    B->b[2] = RCONST(15625.0)/RCONST(83664.0);
    B->b[3] = RCONST(69875.0)/RCONST(102672.0);
    B->b[4] = RCONST(-2260.0)/RCONST(8211.0);
    B->b[5] = RCONST(1.0)/RCONST(4.0);

    B->d[0] = RCONST(4586570599.0)/RCONST(29645900160.0);
    B->d[2] = RCONST(178811875.0)/RCONST(945068544.0);
    B->d[3] = RCONST(814220225.0)/RCONST(1159782912.0);
    B->d[4] = RCONST(-3700637.0)/RCONST(11593932.0);
    B->d[5] = RCONST(61727.0)/RCONST(225920.0);

    B->c[1] = RCONST(1.0)/RCONST(2.0);
    B->c[2] = RCONST(83.0)/RCONST(250.0);
    B->c[3] = RCONST(31.0)/RCONST(50.0);
    B->c[4] = RCONST(17.0)/RCONST(20.0);
    B->c[5] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ARK437L2SA_ERK_7_3_4, { /* ARK4(3)7L[2]SA-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(7, SUNTRUE);
    B->q = 4;
    B->p = 3;
    B->A[1][0] = RCONST(247.0)/RCONST(1000.0);
    B->A[2][0] = RCONST(247.0)/RCONST(4000.0);
    B->A[2][1] = RCONST(2694949928731.0)/RCONST(7487940209513.0);
    B->A[3][0] = RCONST(464650059369.0)/RCONST(8764239774964.0);
    B->A[3][1] = RCONST(878889893998.0)/RCONST(2444806327765.0);
    B->A[3][2] = RCONST(-952945855348.0)/RCONST(12294611323341.0);
    B->A[4][0] = RCONST(476636172619.0)/RCONST(8159180917465.0);
    B->A[4][1] = RCONST(-1271469283451.0)/RCONST(7793814740893.0);
    B->A[4][2] = RCONST(-859560642026.0)/RCONST(4356155882851.0);
    B->A[4][3] = RCONST(1723805262919.0)/RCONST(4571918432560.0);
    B->A[5][0] = RCONST(6338158500785.0)/RCONST(11769362343261.0);
    B->A[5][1] = RCONST(-4970555480458.0)/RCONST(10924838743837.0);
    B->A[5][2] = RCONST(3326578051521.0)/RCONST(2647936831840.0);
    B->A[5][3] = RCONST(-880713585975.0)/RCONST(1841400956686.0);
    B->A[5][4] = RCONST(-1428733748635.0)/RCONST(8843423958496.0);
    B->A[6][0] = RCONST(760814592956.0)/RCONST(3276306540349.0);
    B->A[6][1] = RCONST(760814592956.0)/RCONST(3276306540349.0);
    B->A[6][2] = RCONST(-47223648122716.0)/RCONST(6934462133451.0);
    B->A[6][3] = RCONST(71187472546993.0)/RCONST(9669769126921.0);
    B->A[6][4] = RCONST(-13330509492149.0)/RCONST(9695768672337.0);
    B->A[6][5] = RCONST(11565764226357.0)/RCONST(8513123442827.0);

    B->b[2] = RCONST(9164257142617.0)/RCONST(17756377923965.0);
    B->b[3] = RCONST(-10812980402763.0)/RCONST(74029279521829.0);
    B->b[4] = RCONST(1335994250573.0)/RCONST(5691609445217.0);
    B->b[5] = RCONST(2273837961795.0)/RCONST(8368240463276.0);
    B->b[6] = RCONST(247.0)/RCONST(2000.0);

    B->d[2] = RCONST(4469248916618.0)/RCONST(8635866897933.0);
    B->d[3] = RCONST(-621260224600.0)/RCONST(4094290005349.0);
    B->d[4] = RCONST(696572312987.0)/RCONST(2942599194819.0);
    B->d[5] = RCONST(1532940081127.0)/RCONST(5565293938103.0);
    B->d[6] = RCONST(2441.0)/RCONST(20000.0);

    B->c[1] = RCONST(247.0)/RCONST(1000.0);
    B->c[2] = RCONST(4276536705230.0)/RCONST(10142255878289.0);
    B->c[3] = RCONST(67.0)/RCONST(200.0);
    B->c[4] = RCONST(3.0)/RCONST(40.0);
    B->c[5] = RCONST(7.0)/RCONST(10.0);
    B->c[6] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_SAYFY_ABURUB_6_3_4, { /* Sayfy-Aburub-4-3-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(6, SUNTRUE);
    B->q = 4;
    B->p = 3;
    B->A[1][0] = RCONST(1.0)/RCONST(2.0);
    B->A[2][0] = RCONST(-1.0);
    B->A[2][1] = RCONST(2.0);
    B->A[3][0] = RCONST(1.0)/RCONST(6.0);
    B->A[3][1] = RCONST(2.0)/RCONST(3.0);
    B->A[3][2] = RCONST(1.0)/RCONST(6.0);
    B->A[4][0] = RCONST(0.137);
    B->A[4][1] = RCONST(0.226);
    B->A[4][2] = RCONST(0.137);
    B->A[5][0] = RCONST(0.452);
    B->A[5][1] = RCONST(-0.904);
    B->A[5][2] = RCONST(-0.548);
    B->A[5][4] = RCONST(2.0);

    B->b[0] = RCONST(1.0)/RCONST(6.0);
    B->b[1] = RCONST(1.0)/RCONST(3.0);
    B->b[2] = RCONST(1.0)/RCONST(12.0);
    B->b[3] = RCONST(0.0);
    B->b[4] = RCONST(1.0)/RCONST(3.0);
    B->b[5] = RCONST(1.0)/RCONST(12.0);

    B->d[0] = RCONST(1.0)/RCONST(6.0);
    B->d[1] = RCONST(2.0)/RCONST(3.0);
    B->d[2] = RCONST(1.0)/RCONST(6.0);

    B->c[1] = RCONST(1.0)/RCONST(2.0);
    B->c[2] = RCONST(1.0);
    B->c[3] = RCONST(1.0);
    B->c[4] = RCONST(1.0)/RCONST(2.0);
    B->c[5] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_CASH_KARP_6_4_5, { /* Cash-Karp-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(6, SUNTRUE);
    B->q = 5;
    B->p = 4;
    B->A[1][0] = RCONST(1.0)/RCONST(5.0);
    B->A[2][0] = RCONST(3.0)/RCONST(40.0);
    B->A[2][1] = RCONST(9.0)/RCONST(40.0);
    B->A[3][0] = RCONST(3.0)/RCONST(10.0);
    B->A[3][1] = RCONST(-9.0)/RCONST(10.0);
    B->A[3][2] = RCONST(6.0)/RCONST(5.0);
    B->A[4][0] = RCONST(-11.0)/RCONST(54.0);
    B->A[4][1] = RCONST(5.0)/RCONST(2.0);
    B->A[4][2] = RCONST(-70.0)/RCONST(27.0);
    B->A[4][3] = RCONST(35.0)/RCONST(27.0);
    B->A[5][0] = RCONST(1631.0)/RCONST(55296.0);
    B->A[5][1] = RCONST(175.0)/RCONST(512.0);
    B->A[5][2] = RCONST(575.0)/RCONST(13824.0);
    B->A[5][3] = RCONST(44275.0)/RCONST(110592.0);
    B->A[5][4] = RCONST(253.0)/RCONST(4096.0);

    B->b[0] = RCONST(37.0)/RCONST(378.0);
    B->b[2] = RCONST(250.0)/RCONST(621.0);
    B->b[3] = RCONST(125.0)/RCONST(594.0);
    B->b[5] = RCONST(512.0)/RCONST(1771.0);

    B->d[0] = RCONST(2825.0)/RCONST(27648.0);
    B->d[2] = RCONST(18575.0)/RCONST(48384.0);
    B->d[3] = RCONST(13525.0)/RCONST(55296.0);
    B->d[4] = RCONST(277.0)/RCONST(14336.0);
    B->d[5] = RCONST(1.0)/RCONST(4.0);

    B->c[1] = RCONST(1.0)/RCONST(5.0);
    B->c[2] = RCONST(3.0)/RCONST(10.0);
    B->c[3] = RCONST(3.0)/RCONST(5.0);
    B->c[4] = RCONST(1.0);
    B->c[5] = RCONST(7.0)/RCONST(8.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_FEHLBERG_6_4_5, { /* Fehlberg-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(6, SUNTRUE);
    B->q = 5;
    B->p = 4;
    B->A[1][0] = RCONST(1.0)/RCONST(4.0);
    B->A[2][0] = RCONST(3.0)/RCONST(32.0);
    B->A[2][1] = RCONST(9.0)/RCONST(32.0);
    B->A[3][0] = RCONST(1932.0)/RCONST(2197.0);
    B->A[3][1] = RCONST(-7200.0)/RCONST(2197.0);
    B->A[3][2] = RCONST(7296.0)/RCONST(2197.0);
    B->A[4][0] = RCONST(439.0)/RCONST(216.0);
    B->A[4][1] = RCONST(-8.0);
    B->A[4][2] = RCONST(3680.0)/RCONST(513.0);
    B->A[4][3] = RCONST(-845.0)/RCONST(4104.0);
    B->A[5][0] = RCONST(-8.0)/RCONST(27.0);
    B->A[5][1] = RCONST(2.0);
    B->A[5][2] = RCONST(-3544.0)/RCONST(2565.0);
    B->A[5][3] = RCONST(1859.0)/RCONST(4104.0);
    B->A[5][4] = RCONST(-11.0)/RCONST(40.0);

    B->b[0] = RCONST(16.0)/RCONST(135.0);
    B->b[2] = RCONST(6656.0)/RCONST(12825.0);
    B->b[3] = RCONST(28561.0)/RCONST(56430.0);
    B->b[4] = RCONST(-9.0)/RCONST(50.0);
    B->b[5] = RCONST(2.0)/RCONST(55.0);

    B->d[0] = RCONST(25.0)/RCONST(216.0);
    B->d[2] = RCONST(1408.0)/RCONST(2565.0);
    B->d[3] = RCONST(2197.0)/RCONST(4104.0);
    B->d[4] = RCONST(-1.0)/RCONST(5.0);

    B->c[1] = RCONST(1.0)/RCONST(4.0);
    B->c[2] = RCONST(3.0)/RCONST(8.0);
    B->c[3] = RCONST(12.0)/RCONST(13.0);
    B->c[4] = RCONST(1.0);
    B->c[5] = RCONST(1.0)/RCONST(2.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_DORMAND_PRINCE_7_4_5, { /* Dormand-Prince-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(7, SUNTRUE);
    B->q = 5;
    B->p = 4;
    B->A[1][0] = RCONST(1.0)/RCONST(5.0);
    B->A[2][0] = RCONST(3.0)/RCONST(40.0);
    B->A[2][1] = RCONST(9.0)/RCONST(40.0);
    B->A[3][0] = RCONST(44.0)/RCONST(45.0);
    B->A[3][1] = RCONST(-56.0)/RCONST(15.0);
    B->A[3][2] = RCONST(32.0)/RCONST(9.0);
    B->A[4][0] = RCONST(19372.0)/RCONST(6561.0);
    B->A[4][1] = RCONST(-25360.0)/RCONST(2187.0);
    B->A[4][2] = RCONST(64448.0)/RCONST(6561.0);
    B->A[4][3] = RCONST(-212.0)/RCONST(729.0);
    B->A[5][0] = RCONST(9017.0)/RCONST(3168.0);
    B->A[5][1] = RCONST(-355.0)/RCONST(33.0);
    B->A[5][2] = RCONST(46732.0)/RCONST(5247.0);
    B->A[5][3] = RCONST(49.0)/RCONST(176.0);
    B->A[5][4] = RCONST(-5103.0)/RCONST(18656.0);
    B->A[6][0] = RCONST(35.0)/RCONST(384.0);
    B->A[6][2] = RCONST(500.0)/RCONST(1113.0);
    B->A[6][3] = RCONST(125.0)/RCONST(192.0);
    B->A[6][4] = RCONST(-2187.0)/RCONST(6784.0);
    B->A[6][5] = RCONST(11.0)/RCONST(84.0);

    B->b[0] = RCONST(35.0)/RCONST(384.0);
    B->b[2] = RCONST(500.0)/RCONST(1113.0);
    B->b[3] = RCONST(125.0)/RCONST(192.0);
    B->b[4] = RCONST(-2187.0)/RCONST(6784.0);
    B->b[5] = RCONST(11.0)/RCONST(84.0);

    B->d[0] = RCONST(5179.0)/RCONST(57600.0);
    B->d[2] = RCONST(7571.0)/RCONST(16695.0);
    B->d[3] = RCONST(393.0)/RCONST(640.0);
    B->d[4] = RCONST(-92097.0)/RCONST(339200.0);
    B->d[5] = RCONST(187.0)/RCONST(2100.0);
    B->d[6] = RCONST(1.0)/RCONST(40.0);

    B->c[1] = RCONST(1.0)/RCONST(5.0);
    B->c[2] = RCONST(3.0)/RCONST(10.0);
    B->c[3] = RCONST(4.0)/RCONST(5.0);
    B->c[4] = RCONST(8.0)/RCONST(9.0);
    B->c[5] = RCONST(1.0);
    B->c[6] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ARK548L2SA_ERK_8_4_5, { /* ARK5(4)8L[2]SA-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(8, SUNTRUE);
    B->q = 5;
    B->p = 4;
    B->A[1][0] = RCONST(41.0)/RCONST(100.0);
    B->A[2][0] = RCONST(367902744464.0)/RCONST(2072280473677.0);
    B->A[2][1] = RCONST(677623207551.0)/RCONST(8224143866563.0);
    B->A[3][0] = RCONST(1268023523408.0)/RCONST(10340822734521.0);
    B->A[3][2] = RCONST(1029933939417.0)/RCONST(13636558850479.0);
    B->A[4][0] = RCONST(14463281900351.0)/RCONST(6315353703477.0);
    B->A[4][2] = RCONST(66114435211212.0)/RCONST(5879490589093.0);
    B->A[4][3] = RCONST(-54053170152839.0)/RCONST(4284798021562.0);
    B->A[5][0] = RCONST(14090043504691.0)/RCONST(34967701212078.0);
    B->A[5][2] = RCONST(15191511035443.0)/RCONST(11219624916014.0);
    B->A[5][3] = RCONST(-18461159152457.0)/RCONST(12425892160975.0);
    B->A[5][4] = RCONST(-281667163811.0)/RCONST(9011619295870.0);
    B->A[6][0] = RCONST(19230459214898.0)/RCONST(13134317526959.0);
    B->A[6][2] = RCONST(21275331358303.0)/RCONST(2942455364971.0);
    B->A[6][3] = RCONST(-38145345988419.0)/RCONST(4862620318723.0);
    B->A[6][4] = RCONST(-1.0)/RCONST(8.0);
    B->A[6][5] = RCONST(-1.0)/RCONST(8.0);
    B->A[7][0] = RCONST(-19977161125411.0)/RCONST(11928030595625.0);
    B->A[7][2] = RCONST(-40795976796054.0)/RCONST(6384907823539.0);
    B->A[7][3] = RCONST(177454434618887.0)/RCONST(12078138498510.0);
    B->A[7][4] = RCONST(782672205425.0)/RCONST(8267701900261.0);
    B->A[7][5] = RCONST(-69563011059811.0)/RCONST(9646580694205.0);
    B->A[7][6] = RCONST(7356628210526.0)/RCONST(4942186776405.0);

    B->b[0] = RCONST(-872700587467.0)/RCONST(9133579230613.0);
    B->b[3] = RCONST(22348218063261.0)/RCONST(9555858737531.0);
    B->b[4] = RCONST(-1143369518992.0)/RCONST(8141816002931.0);
    B->b[5] = RCONST(-39379526789629.0)/RCONST(19018526304540.0);
    B->b[6] = RCONST(32727382324388.0)/RCONST(42900044865799.0);
    B->b[7] = RCONST(41.0)/RCONST(200.0);

    B->d[0] = RCONST(-975461918565.0)/RCONST(9796059967033.0);
    B->d[3] = RCONST(78070527104295.0)/RCONST(32432590147079.0);
    B->d[4] = RCONST(-548382580838.0)/RCONST(3424219808633.0);
    B->d[5] = RCONST(-33438840321285.0)/RCONST(15594753105479.0);
    B->d[6] = RCONST(3629800801594.0)/RCONST(4656183773603.0);
    B->d[7] = RCONST(4035322873751.0)/RCONST(18575991585200.0);

    B->c[1] = RCONST(41.0)/RCONST(100.0);
    B->c[2] = RCONST(2935347310677.0)/RCONST(11292855782101.0);
    B->c[3] = RCONST(1426016391358.0)/RCONST(7196633302097.0);
    B->c[4] = RCONST(92.0)/RCONST(100.0);
    B->c[5] = RCONST(24.0)/RCONST(100.0);
    B->c[6] = RCONST(3.0)/RCONST(5.0);
    B->c[7] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_ARK548L2SAb_ERK_8_4_5, { /* ARK5(4)8L[2]SAb-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(8, SUNTRUE);
    B->q = 5;
    B->p = 4;
    B->A[1][0] = RCONST(4.0)/RCONST(9.0);
    B->A[2][0] = RCONST(1.0)/RCONST(9.0);
    B->A[2][1] = RCONST(1183333538310.0)/RCONST(1827251437969.0);
    B->A[3][0] = RCONST(895379019517.0)/RCONST(9750411845327.0);
    B->A[3][1] = RCONST(477606656805.0)/RCONST(13473228687314.0);
    B->A[3][2] = RCONST(-112564739183.0)/RCONST(9373365219272.0);
    B->A[4][0] = RCONST(-4458043123994.0)/RCONST(13015289567637.0);
    B->A[4][1] = RCONST(-2500665203865.0)/RCONST(9342069639922.0);
    B->A[4][2] = RCONST(983347055801.0)/RCONST(8893519644487.0);
    B->A[4][3] = RCONST(2185051477207.0)/RCONST(2551468980502.0);
    B->A[5][0] = RCONST(-167316361917.0)/RCONST(17121522574472.0);
    B->A[5][1] = RCONST(1605541814917.0)/RCONST(7619724128744.0);
    B->A[5][2] = RCONST(991021770328.0)/RCONST(13052792161721.0);
    B->A[5][3] = RCONST(2342280609577.0)/RCONST(11279663441611.0);
    B->A[5][4] = RCONST(3012424348531.0)/RCONST(12792462456678.0);
    B->A[6][0] = RCONST(6680998715867.0)/RCONST(14310383562358.0);
    B->A[6][1] = RCONST(5029118570809.0)/RCONST(3897454228471.0);
    B->A[6][2] = RCONST(2415062538259.0)/RCONST(6382199904604.0);
    B->A[6][3] = RCONST(-3924368632305.0)/RCONST(6964820224454.0);
    B->A[6][4] = RCONST(-4331110370267.0)/RCONST(15021686902756.0);
    B->A[6][5] = RCONST(-3944303808049.0)/RCONST(11994238218192.0);
    B->A[7][0] = RCONST(2193717860234.0)/RCONST(3570523412979.0);
    B->A[7][1] = RCONST(2193717860234.0)/RCONST(3570523412979.0);
    B->A[7][2] = RCONST(5952760925747.0)/RCONST(18750164281544.0);
    B->A[7][3] = RCONST(-4412967128996.0)/RCONST(6196664114337.0);
    B->A[7][4] = RCONST(4151782504231.0)/RCONST(36106512998704.0);
    B->A[7][5] = RCONST(572599549169.0)/RCONST(6265429158920.0);
    B->A[7][6] = RCONST(-457874356192.0)/RCONST(11306498036315.0);

    B->b[2] = RCONST(3517720773327.0)/RCONST(20256071687669.0);
    B->b[3] = RCONST(4569610470461.0)/RCONST(17934693873752.0);
    B->b[4] = RCONST(2819471173109.0)/RCONST(11655438449929.0);
    B->b[5] = RCONST(3296210113763.0)/RCONST(10722700128969.0);
    B->b[6] = RCONST(-1142099968913.0)/RCONST(5710983926999.0);
    B->b[7] = RCONST(2.0)/RCONST(9.0);

    B->d[2] = RCONST(520639020421.0)/RCONST(8300446712847.0);
    B->d[3] = RCONST(4550235134915.0)/RCONST(17827758688493.0);
    B->d[4] = RCONST(1482366381361.0)/RCONST(6201654941325.0);
    B->d[5] = RCONST(5551607622171.0)/RCONST(13911031047899.0);
    B->d[6] = RCONST(-5266607656330.0)/RCONST(36788968843917.0);
    B->d[7] = RCONST(1074053359553.0)/RCONST(5740751784926.0);

    B->c[1] = RCONST(4.0)/RCONST(9.0);
    B->c[2] = RCONST(6456083330201.0)/RCONST(8509243623797.0);
    B->c[3] = RCONST(1632083962415.0)/RCONST(14158861528103.0);
    B->c[4] = RCONST(6365430648612.0)/RCONST(17842476412687.0);
    B->c[5] = RCONST(18.0)/RCONST(25.0);
    B->c[6] = RCONST(191.0)/RCONST(200.0);
    B->c[7] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_VERNER_8_5_6, { /* Verner-6-5 */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(8, SUNTRUE);
    B->q = 6;
    B->p = 5;
    B->A[1][0] = RCONST(1.0)/RCONST(6.0);
    B->A[2][0] = RCONST(4.0)/RCONST(75.0);
    B->A[2][1] = RCONST(16.0)/RCONST(75.0);
    B->A[3][0] = RCONST(5.0)/RCONST(6.0);
    B->A[3][1] = RCONST(-8.0)/RCONST(3.0);
    B->A[3][2] = RCONST(5.0)/RCONST(2.0);
    B->A[4][0] = RCONST(-165.0)/RCONST(64.0);
    B->A[4][1] = RCONST(55.0)/RCONST(6.0);
    B->A[4][2] = RCONST(-425.0)/RCONST(64.0);
    B->A[4][3] = RCONST(85.0)/RCONST(96.0);
    B->A[5][0] = RCONST(12.0)/RCONST(5.0);
    B->A[5][1] = RCONST(-8.0);
    B->A[5][2] = RCONST(4015.0)/RCONST(612.0);
    B->A[5][3] = RCONST(-11.0)/RCONST(36.0);
    B->A[5][4] = RCONST(88.0)/RCONST(255.0);
    B->A[6][0] = RCONST(-8263.0)/RCONST(15000.0);
    B->A[6][1] = RCONST(124.0)/RCONST(75.0);
    B->A[6][2] = RCONST(-643.0)/RCONST(680.0);
    B->A[6][3] = RCONST(-81.0)/RCONST(250.0);
    B->A[6][4] = RCONST(2484.0)/RCONST(10625.0);
    B->A[7][0] = RCONST(3501.0)/RCONST(1720.0);
    B->A[7][1] = RCONST(-300.0)/RCONST(43.0);
    B->A[7][2] = RCONST(297275.0)/RCONST(52632.0);
    B->A[7][3] = RCONST(-319.0)/RCONST(2322.0);
    B->A[7][4] = RCONST(24068.0)/RCONST(84065.0);
    B->A[7][6] = RCONST(3850.0)/RCONST(26703.0);

    B->b[0] = RCONST(3.0)/RCONST(40.0);
    B->b[2] = RCONST(875.0)/RCONST(2244.0);
    B->b[3] = RCONST(23.0)/RCONST(72.0);
    B->b[4] = RCONST(264.0)/RCONST(1955.0);
    B->b[6] = RCONST(125.0)/RCONST(11592.0);
    B->b[7] = RCONST(43.0)/RCONST(616.0);

    B->d[0] = RCONST(13.0)/RCONST(160.0);
    B->d[2] = RCONST(2375.0)/RCONST(5984.0);
    B->d[3] = RCONST(5.0)/RCONST(16.0);
    B->d[4] = RCONST(12.0)/RCONST(85.0);
    B->d[5] = RCONST(3.0)/RCONST(44.0);

    B->c[0] = RCONST(0.0);
    B->c[1] = RCONST(1.0)/RCONST(6.0);
    B->c[2] = RCONST(4.0)/RCONST(15.0);
    B->c[3] = RCONST(2.0)/RCONST(3.0);
    B->c[4] = RCONST(5.0)/RCONST(6.0);
    B->c[5] = RCONST(1.0);
    B->c[6] = RCONST(1.0)/RCONST(15.0);
    B->c[7] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_VERNER_9_5_6, { /* Verner-6-5b (DOI: 10.1007/s11075-009-9290-3) */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(9, SUNTRUE);
    B->q = 6;
    B->p = 5;

    B->A[1][0] = RCONST(3.0)/RCONST(50.0);
    B->A[2][0] = RCONST(519479.0)/RCONST(27000000.0);
    B->A[2][1] = RCONST(2070721.0)/RCONST(27000000.0);
    B->A[3][0] = RCONST(1439.0)/RCONST(40000.0);
    B->A[3][2] = RCONST(4317.0)/RCONST(40000.0);
    B->A[4][0] = RCONST(109225017611.0)/RCONST(82828840000.0);
    B->A[4][2] = RCONST(-417627820623.0)/RCONST(82828840000.0);
    B->A[4][3] = RCONST(43699198143.0)/RCONST(10353605000.0);
    B->A[5][0] = RCONST(-8036815292643907349452552172369.0)/RCONST(191934985946683241245914401600.0);
    B->A[5][2] = RCONST(246134619571490020064824665.0)/RCONST(1543816496655405117602368.0);
    B->A[5][3] = RCONST(-13880495956885686234074067279.0)/RCONST(113663489566254201783474344.0);
    B->A[5][4] = RCONST(755005057777788994734129.0)/RCONST(136485922925633667082436.0);
    B->A[6][0] = RCONST(-1663299841566102097180506666498880934230261.0)/RCONST(30558424506156170307020957791311384232000.0);
    B->A[6][2] = RCONST(130838124195285491799043628811093033.0)/RCONST(631862949514135618861563657970240.0);
    B->A[6][3] = RCONST(-3287100453856023634160618787153901962873.0)/RCONST(20724314915376755629135711026851409200.0);
    B->A[6][4] = RCONST(2771826790140332140865242520369241.0)/RCONST(396438716042723436917079980147600.0);
    B->A[6][5] = RCONST(-1799166916139193.0)/RCONST(96743806114007800.0);
    B->A[7][0] = RCONST(-832144750039369683895428386437986853923637763.0)/RCONST(15222974550069600748763651844667619945204887.0);
    B->A[7][2] = RCONST(818622075710363565982285196611368750.0)/RCONST(3936576237903728151856072395343129.0);
    B->A[7][3] = RCONST(-9818985165491658464841194581385463434793741875.0)/RCONST(61642597962658994069869370923196463581866011.0);
    B->A[7][4] = RCONST(31796692141848558720425711042548134769375.0)/RCONST(4530254033500045975557858016006308628092.0);
    B->A[7][5] = RCONST(-14064542118843830075.0)/RCONST(766928748264306853644.0);
    B->A[7][6] = RCONST(-1424670304836288125.0)/RCONST(2782839104764768088217.0);
    B->A[8][0] = RCONST(382735282417.0)/RCONST(11129397249634.0);
    B->A[8][3] = RCONST(5535620703125000.0)/RCONST(21434089949505429.0);
    B->A[8][4] = RCONST(13867056347656250.0)/RCONST(32943296570459319.0);
    B->A[8][5] = RCONST(626271188750.0)/RCONST(142160006043.0);
    B->A[8][6] = RCONST(-51160788125000.0)/RCONST(289890548217.0);
    B->A[8][7] = RCONST(163193540017.0)/RCONST(946795234.0);

    B->b[0] = RCONST(382735282417.0)/RCONST(11129397249634.0);
    B->b[3] = RCONST(5535620703125000.0)/RCONST(21434089949505429.0);
    B->b[4] = RCONST(13867056347656250.0)/RCONST(32943296570459319.0);
    B->b[5] = RCONST(626271188750.0)/RCONST(142160006043.0);
    B->b[6] = RCONST(-51160788125000.0)/RCONST(289890548217.0);
    B->b[7] = RCONST(163193540017.0)/RCONST(946795234.0);

    B->d[0] = RCONST(273361583.0)/RCONST(5567482366.0);
    B->d[3] = RCONST(1964687500000.0)/RCONST(8727630165387.0);
    B->d[4] = RCONST(596054687500.0)/RCONST(1269637976277.0);
    B->d[5] = RCONST(12740367500.0)/RCONST(15795556227.0);
    B->d[7] = RCONST(-4462730789736252634813752317.0)/RCONST(7350663039626676022821734166.0);
    B->d[8] = RCONST(441454562788983500.0)/RCONST(7763730504400359099.0);

    B->c[1] = RCONST(3.0)/RCONST(50.0);
    B->c[2] = RCONST(1439.0)/RCONST(15000.0);
    B->c[3] = RCONST(1439.0)/RCONST(10000.0);
    B->c[4] = RCONST(4973.0)/RCONST(10000.0);
    B->c[5] = RCONST(389.0)/RCONST(400.0);
    B->c[6] = RCONST(1999.0)/RCONST(2000.0);
    B->c[7] = RCONST(1.0);
    B->c[8] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_VERNER_10_6_7, { /* Verner-7-6 (DOI: 10.1007/s11075-009-9290-3) */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(10, SUNTRUE);
    B->q = 7;
    B->p = 6;

    B->A[1][0] = RCONST(1.0)/RCONST(200.0);
    B->A[2][0] = RCONST(-4361.0)/RCONST(4050.0);
    B->A[2][1] = RCONST(2401.0)/RCONST(2025.0);
    B->A[3][0] = RCONST(49.0)/RCONST(1200.0);
    B->A[3][2] = RCONST(49.0)/RCONST(400.0);
    B->A[4][0] = RCONST(2454451729.0)/RCONST(3841600000.0);
    B->A[4][2] = RCONST(-9433712007.0)/RCONST(3841600000.0);
    B->A[4][3] = RCONST(4364554539.0)/RCONST(1920800000.0);
    B->A[5][0] = RCONST(-6187101755456742839167388910402379177523537620.0)/RCONST(2324599620333464857202963610201679332423082271.0);
    B->A[5][2] = RCONST(27569888999279458303270493567994248533230000.0)/RCONST(2551701010245296220859455115479340650299761.0);
    B->A[5][3] = RCONST(-37368161901278864592027018689858091583238040000.0)/RCONST(4473131870960004275166624817435284159975481033.0);
    B->A[5][4] = RCONST(1392547243220807196190880383038194667840000000.0)/RCONST(1697219131380493083996999253929006193143549863.0);
    B->A[6][0] = RCONST(11272026205260557297236918526339.0)/RCONST(1857697188743815510261537500000.0);
    B->A[6][2] = RCONST(-48265918242888069.0)/RCONST(1953194276993750.0);
    B->A[6][3] = RCONST(26726983360888651136155661781228.0)/RCONST(1308381343805114800955157615625.0);
    B->A[6][4] = RCONST(-2090453318815827627666994432.0)/RCONST(1096684189897834170412307919.0);
    B->A[6][5] = RCONST(1148577938985388929671582486744843844943428041509.0)/RCONST(1141532118233823914568777901158338927629837500000.0);
    B->A[7][0] = RCONST(1304457204588839386329181466225966641.0)/RCONST(108211771565488329642169667802016000.0);
    B->A[7][2] = RCONST(-1990261989751005.0)/RCONST(40001418792832.0);
    B->A[7][3] = RCONST(2392691599894847687194643439066780106875.0)/RCONST(58155654089143548047476915856270826016.0);
    B->A[7][4] = RCONST(-1870932273351008733802814881998561250.0)/RCONST(419326053051486744762255151208232123.0);
    B->A[7][5] = RCONST(1043329047173803328972823866240311074041739158858792987034783181.0)/RCONST(510851127745017966999893975119259285040213723744255237522144000.0);
    B->A[7][6] = RCONST(-311918858557595100410788125.0)/RCONST(3171569057622789618800376448.0);
    B->A[8][0] = RCONST(17579784273699839132265404100877911157.0)/RCONST(1734023495717116205617154737841023480.0);
    B->A[8][2] = RCONST(-18539365951217471064750.0)/RCONST(434776548575709731377.0);
    B->A[8][3] = RCONST(447448655912568142291911830292656995992000.0)/RCONST(12511202807447096607487664209063950964109.0);
    B->A[8][4] = RCONST(-65907597316483030274308429593905808000000.0)/RCONST(15158061430635748897861852383197382130691.0);
    B->A[8][5] = RCONST(273847823027445129865693702689010278588244606493753883568739168819449761.0)/RCONST(136252034448398939768371761610231099586032870552034688235302796640584360.0);
    B->A[8][6] = RCONST(694664732797172504668206847646718750.0)/RCONST(1991875650119463976442052358853258111.0);
    B->A[8][7] = RCONST(-19705319055289176355560129234220800.0)/RCONST(72595753317320295604316217197876507.0);
    B->A[9][0] = RCONST(-511858190895337044664743508805671.0)/RCONST(11367030248263048398341724647960.0);
    B->A[9][2] = RCONST(2822037469238841750.0)/RCONST(15064746656776439.0);
    B->A[9][3] = RCONST(-23523744880286194122061074624512868000.0)/RCONST(152723005449262599342117017051789699.0);
    B->A[9][4] = RCONST(10685036369693854448650967542704000000.0)/RCONST(575558095977344459903303055137999707.0);
    B->A[9][5] = RCONST(-6259648732772142303029374363607629515525848829303541906422993.0)/RCONST(876479353814142962817551241844706205620792843316435566420120.0);
    B->A[9][6] = RCONST(17380896627486168667542032602031250.0)/RCONST(13279937889697320236613879977356033.0);

    B->b[0] = RCONST(96762636172307789.0)/RCONST(2051985304794103980.0);
    B->b[3] = RCONST(312188947591288252500000.0)/RCONST(1212357694274963646019729.0);
    B->b[4] = RCONST(13550580884964304000000000000.0)/RCONST(51686919683339547115937980629.0);
    B->b[5] = RCONST(72367769693133178898676076432831566019684378142853445230956642801.0)/RCONST(475600216991873963561768100160364792981629064220601844848928537580.0);
    B->b[6] = RCONST(1619421054120605468750.0)/RCONST(3278200730370057108183.0);
    B->b[7] = RCONST(-66898316144057728000.0)/RCONST(227310933007074849597.0);
    B->b[8] = RCONST(181081444637946577.0)/RCONST(2226845467039736466.0);

    B->d[0] = RCONST(117807213929927.0)/RCONST(2640907728177740.0);
    B->d[3] = RCONST(4758744518816629500000.0)/RCONST(17812069906509312711137.0);
    B->d[4] = RCONST(1730775233574080000000000.0)/RCONST(7863520414322158392809673.0);
    B->d[5] = RCONST(2682653613028767167314032381891560552585218935572349997.0)/RCONST(12258338284789875762081637252125169126464880985167722660.0);
    B->d[6] = RCONST(40977117022675781250.0)/RCONST(178949401077111131341.0);
    B->d[9] = RCONST(2152106665253777.0)/RCONST(106040260335225546.0);

    B->c[1] = RCONST(1.0)/RCONST(200.0);
    B->c[2] = RCONST(49.0)/RCONST(450.0);
    B->c[3] = RCONST(49.0)/RCONST(300.0);
    B->c[4] = RCONST(911.0)/RCONST(2000.0);
    B->c[5] = RCONST(3480084980.0)/RCONST(5709648941.0);
    B->c[6] = RCONST(221.0)/RCONST(250.0);
    B->c[7] = RCONST(37.0)/RCONST(40.0);
    B->c[8] = RCONST(1.0);
    B->c[9] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_VERNER_13_7_8, { /* Verner-8-7 (DOI: 10.1007/s11075-009-9290-3) */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(13, SUNTRUE);
    B->q = 8;
    B->p = 7;

    B->A[1][0] = RCONST(1.0)/RCONST(20.0);
    B->A[2][0] = RCONST(-7161.0)/RCONST(1024000.0);
    B->A[2][1] = RCONST(116281.0)/RCONST(1024000.0);
    B->A[3][0] = RCONST(1023.0)/RCONST(25600.0);
    B->A[3][2] = RCONST(3069.0)/RCONST(25600.0);
    B->A[4][0] = RCONST(4202367.0)/RCONST(11628100.0);
    B->A[4][2] = RCONST(-3899844.0)/RCONST(2907025.0);
    B->A[4][3] = RCONST(3982992.0)/RCONST(2907025.0);
    B->A[5][0] = RCONST(5611.0)/RCONST(114400.0);
    B->A[5][3] = RCONST(31744.0)/RCONST(135025.0);
    B->A[5][4] = RCONST(923521.0)/RCONST(5106400.0);
    B->A[6][0] = RCONST(21173.0)/RCONST(343200.0);
    B->A[6][3] = RCONST(8602624.0)/RCONST(76559175.0);
    B->A[6][4] = RCONST(-26782109.0)/RCONST(689364000.0);
    B->A[6][5] = RCONST(5611.0)/RCONST(283500.0);
    B->A[7][0] = RCONST(-1221101821869329.0)/RCONST(690812928000000.0);
    B->A[7][3] = RCONST(-125.0)/RCONST(2.0);
    B->A[7][4] = RCONST(-1024030607959889.0)/RCONST(168929280000000.0);
    B->A[7][5] = RCONST(1501408353528689.0)/RCONST(265697280000000.0);
    B->A[7][6] = RCONST(6070139212132283.0)/RCONST(92502016000000.0);
    B->A[8][0] = RCONST(-1472514264486215803881384708877264246346044433307094207829051978044531801133057155.0)/RCONST(1246894801620032001157059621643986024803301558393487900440453636168046069686436608.0);
    B->A[8][3] = RCONST(-5172294311085668458375175655246981230039025336933699114138315270772319372469280000.0)/RCONST(124619381004809145897278630571215298365257079410236252921850936749076487132995191.0);
    B->A[8][4] = RCONST(-12070679258469254807978936441733187949484571516120469966534514296406891652614970375.0)/RCONST(2722031154761657221710478184531100699497284085048389015085076961673446140398628096.0);
    B->A[8][5] = RCONST(780125155843893641323090552530431036567795592568497182701460674803126770111481625.0)/RCONST(183110425412731972197889874507158786859226102980861859505241443073629143100805376.0);
    B->A[8][6] = RCONST(664113122959911642134782135839106469928140328160577035357155340392950009492511875.0)/RCONST(15178465598586248136333023107295349175279765150089078301139943253016877823170816.0);
    B->A[8][7] = RCONST(10332848184452015604056836767286656859124007796970668046446015775000000.0)/RCONST(1312703550036033648073834248740727914537972028638950165249582733679393783.0);
    B->A[9][0] = RCONST(-29055573360337415088538618442231036441314060511.0)/RCONST(22674759891089577691327962602370597632000000000.0);
    B->A[9][3] = RCONST(-20462749524591049105403365239069.0)/RCONST(454251913499893469596231268750.0);
    B->A[9][4] = RCONST(-180269259803172281163724663224981097.0)/RCONST(38100922558256871086579832832000000.0);
    B->A[9][5] = RCONST(21127670214172802870128286992003940810655221489.0)/RCONST(4679473877997892906145822697976708633673728000.0);
    B->A[9][6] = RCONST(318607235173649312405151265849660869927653414425413.0)/RCONST(6714716715558965303132938072935465423910912000000.0);
    B->A[9][7] = RCONST(212083202434519082281842245535894.0)/RCONST(20022426044775672563822865371173879.0);
    B->A[9][8] = RCONST(-2698404929400842518721166485087129798562269848229517793703413951226714583.0)/RCONST(469545674913934315077000442080871141884676035902717550325616728175875000000.0);
    B->A[10][0] = RCONST(-2342659845814086836951207140065609179073838476242943917.0)/RCONST(1358480961351056777022231400139158760857532162795520000.0);
    B->A[10][3] = RCONST(-996286030132538159613930889652.0)/RCONST(16353068885996164905464325675.0);
    B->A[10][4] = RCONST(-26053085959256534152588089363841.0)/RCONST(4377552804565683061011299942400.0);
    B->A[10][5] = RCONST(20980822345096760292224086794978105312644533925634933539.0)/RCONST(3775889992007550803878727839115494641972212962174156800.0);
    B->A[10][6] = RCONST(890722993756379186418929622095833835264322635782294899.0)/RCONST(13921242001395112657501941955594013822830119803764736.0);
    B->A[10][7] = RCONST(161021426143124178389075121929246710833125.0)/RCONST(10997207722131034650667041364346422894371443.0);
    B->A[10][8] = RCONST(300760669768102517834232497565452434946672266195876496371874262392684852243925359864884962513.0)/RCONST(4655443337501346455585065336604505603760824779615521285751892810315680492364106674524398280000.0);
    B->A[10][9] = RCONST(-31155237437111730665923206875.0)/RCONST(392862141594230515010338956291.0);
    B->A[11][0] = RCONST(-2866556991825663971778295329101033887534912787724034363.0)/RCONST(868226711619262703011213925016143612030669233795338240.0);
    B->A[11][3] = RCONST(-16957088714171468676387054358954754000.0)/RCONST(143690415119654683326368228101570221.0);
    B->A[11][4] = RCONST(-4583493974484572912949314673356033540575.0)/RCONST(451957703655250747157313034270335135744.0);
    B->A[11][5] = RCONST(2346305388553404258656258473446184419154740172519949575.0)/RCONST(256726716407895402892744978301151486254183185289662464.0);
    B->A[11][6] = RCONST(1657121559319846802171283690913610698586256573484808662625.0)/RCONST(13431480411255146477259155104956093505361644432088109056.0);
    B->A[11][7] = RCONST(345685379554677052215495825476969226377187500.0)/RCONST(74771167436930077221667203179551347546362089.0);
    B->A[11][8] = RCONST(-3205890962717072542791434312152727534008102774023210240571361570757249056167015230160352087048674542196011.0)/RCONST(947569549683965814783015124451273604984657747127257615372449205973192657306017239103491074738324033259120.0);
    B->A[11][9] = RCONST(40279545832706233433100438588458933210937500.0)/RCONST(8896460842799482846916972126377338947215101.0);
    B->A[11][10] = RCONST(-6122933601070769591613093993993358877250.0)/RCONST(1050517001510235513198246721302027675953.0);
    B->A[12][0] = RCONST(-618675905535482500672800859344538410358660153899637.0)/RCONST(203544282118214047100119475340667684874292102389760.0);
    B->A[12][3] = RCONST(-4411194916804718600478400319122931000.0)/RCONST(40373053902469967450761491269633019.0);
    B->A[12][4] = RCONST(-16734711409449292534539422531728520225.0)/RCONST(1801243715290088669307203927210237952.0);
    B->A[12][5] = RCONST(135137519757054679098042184152749677761254751865630525.0)/RCONST(16029587794486289597771326361911895112703716593983488.0);
    B->A[12][6] = RCONST(38937568367409876012548551903492196137929710431584875.0)/RCONST(340956454090191606099548798001469306974758443147264.0);
    B->A[12][7] = RCONST(-6748865855011993037732355335815350667265625.0)/RCONST(7002880395717424621213565406715087764770357.0);
    B->A[12][8] = RCONST(-1756005520307450928195422767042525091954178296002788308926563193523662404739779789732685671.0)/RCONST(348767814578469983605688098046186480904607278021030540735333862087061574934154942830062320.0);
    B->A[12][9] = RCONST(53381024589235611084013897674181629296875.0)/RCONST(8959357584795694524874969598508592944141.0);

    B->b[0] = RCONST(44901867737754616851973.0)/RCONST(1014046409980231013380680.0);
    B->b[5] = RCONST(791638675191615279648100000.0)/RCONST(2235604725089973126411512319.0);
    B->b[6] = RCONST(3847749490868980348119500000.0)/RCONST(15517045062138271618141237517.0);
    B->b[7] = RCONST(-13734512432397741476562500000.0)/RCONST(875132892924995907746928783.0);
    B->b[8] = RCONST(12274765470313196878428812037740635050319234276006986398294443554969616342274215316330684448207141.0)/RCONST(489345147493715517650385834143510934888829280686609654482896526796523353052166757299452852166040.0);
    B->b[9] = RCONST(-9798363684577739445312500000.0)/RCONST(308722986341456031822630699.0);
    B->b[10] = RCONST(282035543183190840068750.0)/RCONST(12295407629873040425991.0);
    B->b[11] = RCONST(-306814272936976936753.0)/RCONST(1299331183183744997286.0);

    B->d[0] = RCONST(10835401739407019406577.0)/RCONST(244521829356935137978320.0);
    B->d[5] = RCONST(13908189778321895491375000.0)/RCONST(39221135527894265375640567.0);
    B->d[6] = RCONST(73487947527027243487625000.0)/RCONST(296504045773342769773399443.0);
    B->d[7] = RCONST(68293140641257649609375000.0)/RCONST(15353208647806945749946119.0);
    B->d[8] = RCONST(22060647948996678611017711379974578860522018208949721559448560203338437626022142776381.0)/RCONST(1111542009262325874512959185795727215759010577565736079641376621381577236680929558640.0);
    B->d[9] = RCONST(-547971229495642458203125000.0)/RCONST(23237214025700991642563601.0);
    B->d[12] = RCONST(-28735456870978964189.0)/RCONST(79783493704265043693.0);

    B->c[1] = RCONST(1.0)/RCONST(20.0);
    B->c[2] = RCONST(341.0)/RCONST(3200.0);
    B->c[3] = RCONST(1023.0)/RCONST(6400.0);
    B->c[4] = RCONST(39.0)/RCONST(100.0);
    B->c[5] = RCONST(93.0)/RCONST(200.0);
    B->c[6] = RCONST(31.0)/RCONST(200.0);
    B->c[7] = RCONST(943.0)/RCONST(1000.0);
    B->c[8] = RCONST(7067558016280.0)/RCONST(7837150160667.0);
    B->c[9] = RCONST(909.0)/RCONST(1000.0);
    B->c[10] = RCONST(47.0)/RCONST(50.0);
    B->c[11] = RCONST(1.0);
    B->c[12] = RCONST(1.0);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_VERNER_16_8_9, { /* Verner-9-8 (DOI: 10.1007/s11075-009-9290-3) */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(16, SUNTRUE);
    B->q = 9;
    B->p = 8;

    B->A[1][0] = RCONST(0.3462e-1);
    B->A[2][0] = RCONST(-0.389335438857287327017042687229284478532e-1);
    B->A[2][1] = RCONST(0.1359578945245091786499878854939346230295);
    B->A[3][0] = RCONST(0.3638413148954266723060635628912731569111e-1);
    B->A[3][2] = RCONST(0.1091523944686280016918190688673819470733);
    B->A[4][0] = RCONST(2.025763914393969636805657604282571047511);
    B->A[4][2] = RCONST(-7.638023836496292020387602153091964592952);
    B->A[4][3] = RCONST(6.173259922102322383581944548809393545442);
    B->A[5][0] = RCONST(0.5112275589406060872792270881648288397197e-1);
    B->A[5][3] = RCONST(0.1770823794555021537929910813839068684087);
    B->A[5][4] = RCONST(0.80277624092225014536138698108025283759e-3);
    B->A[6][0] = RCONST(0.1316006357975216279279871693164256985334);
    B->A[6][3] = RCONST(-0.2957276252669636417685183174672273730699);
    B->A[6][4] = RCONST(0.878137803564295237421124704053886667082e-1);
    B->A[6][5] = RCONST(0.6213052975225274774321435005639430026100);
    B->A[7][0] = RCONST(0.7166666666666666666666666666666666666667e-1);
    B->A[7][5] = RCONST(0.3305533578915319409260346730051472207728);
    B->A[7][6] = RCONST(0.2427799754418013924072986603281861125606);
    B->A[8][0] = RCONST(0.7180664062500000000000000000000000000000e-1);
    B->A[8][5] = RCONST(0.3294380283228177160744825466257672816401);
    B->A[8][6] = RCONST(0.1165190029271822839255174533742327183599);
    B->A[8][7] = RCONST(-0.3401367187500000000000000000000000000000e-1);
    B->A[9][0] = RCONST(0.4836757646340646986611287718844085773549e-1);
    B->A[9][5] = RCONST(0.3928989925676163974333190042057047002852e-1);
    B->A[9][6] = RCONST(0.1054740945890344608263649267140088017604);
    B->A[9][7] = RCONST(-0.2143865284648312665982642293830533996214e-1);
    B->A[9][8] = RCONST(-0.1041229174627194437759832813847147895623);
    B->A[10][0] = RCONST(-0.2664561487201478635337289243849737340534e-1);
    B->A[10][5] = RCONST(0.3333333333333333333333333333333333333333e-1);
    B->A[10][6] = RCONST(-0.1631072244872467239162704487554706387141);
    B->A[10][7] = RCONST(0.3396081684127761199487954930015522928244e-1);
    B->A[10][8] = RCONST(0.1572319413814626097110769806810024118077);
    B->A[10][9] = RCONST(0.2152267478031879552303534778794770376960);
    B->A[11][0] = RCONST(0.3689009248708622334786359863227633989718e-1);
    B->A[11][5] = RCONST(-0.1465181576725542928653609891758501156785);
    B->A[11][6] = RCONST(0.2242577768172024345345469822625833796001);
    B->A[11][7] = RCONST(0.2294405717066072637090897902753790803034e-1);
    B->A[11][8] = RCONST(-0.35850052905728761357394424889330334334e-2);
    B->A[11][9] = RCONST(0.8669223316444385506869203619044453906053e-1);
    B->A[11][10] = RCONST(0.4383840651968337846196219974168630120572);
    B->A[12][0] = RCONST(-0.4866012215113340846662212357570395295088);
    B->A[12][5] = RCONST(-6.304602650282852990657772792012007122988);
    B->A[12][6] = RCONST(-0.281245618289472564778284183790118418111);
    B->A[12][7] = RCONST(-2.679019236219849057687906597489223155566);
    B->A[12][8] = RCONST(0.518815663924157511565311164615012522024);
    B->A[12][9] = RCONST(1.365353187603341710683633635235238678626);
    B->A[12][10] = RCONST(5.885091088503946585721274891680604830712);
    B->A[12][11] = RCONST(2.802808786272062889819965117517532194812);
    B->A[13][0] = RCONST(0.4185367457753471441471025246471931649633);
    B->A[13][5] = RCONST(6.724547581906459363100870806514855026676);
    B->A[13][6] = RCONST(-0.425444280164611790606983409697113064616);
    B->A[13][7] = RCONST(3.343279153001265577811816947557982637749);
    B->A[13][8] = RCONST(0.617081663117537759528421117507709784737);
    B->A[13][9] = RCONST(-0.929966123939932833937749523988800852013);
    B->A[13][10] = RCONST(-6.099948804751010722472962837945508844846);
    B->A[13][11] = RCONST(-3.002206187889399044804158084895173690015);
    B->A[13][12] = RCONST(0.2553202529443445472336424602988558373637);
    B->A[14][0] = RCONST(-0.779374086122884664644623040843840506343);
    B->A[14][5] = RCONST(-13.93734253810777678786523664804936051203);
    B->A[14][6] = RCONST(1.252048853379357320949735183924200895136);
    B->A[14][7] = RCONST(-14.69150040801686878191527989293072091588);
    B->A[14][8] = RCONST(-0.494705058533141685655191992136962873577);
    B->A[14][9] = RCONST(2.242974909146236657906984549543692874755);
    B->A[14][10] = RCONST(13.36789380382864375813864978592679139881);
    B->A[14][11] = RCONST(14.39665048665068644512236935340272139005);
    B->A[14][12] = RCONST(-0.7975813331776800379127866056663258667437);
    B->A[14][13] = RCONST(0.4409353709534277758753793068298041158235);
    B->A[15][0] = RCONST(2.058051337466886442151242368989994043993);
    B->A[15][5] = RCONST(22.35793772796803295519317565842520212899);
    B->A[15][6] = RCONST(0.90949810997556332745009198137971890783);
    B->A[15][7] = RCONST(35.89110098240264104710550686568482456493);
    B->A[15][8] = RCONST(-3.442515027624453437985000403608480262211);
    B->A[15][9] = RCONST(-4.865481358036368826566013387928704014496);
    B->A[15][10] = RCONST(-18.90980381354342625688427480879773032857);
    B->A[15][11] = RCONST(-34.26354448030451782929251177395134170515);
    B->A[15][12] = RCONST(1.264756521695642578827783499806516664686);

    B->b[0] = RCONST(0.1461197685842315252051541915018784713459e-1);
    B->b[7] = RCONST(-0.3915211862331339089410228267288242030810);
    B->b[8] = RCONST(0.2310932500289506415909675644868993669908);
    B->b[9] = RCONST(0.1274766769992852382560589467488989175618);
    B->b[10] = RCONST(0.2246434176204157731566981937082069688984);
    B->b[11] = RCONST(0.5684352689748512932705226972873692126743);
    B->b[12] = RCONST(0.5825871557215827200814768021863420902155e-1);
    B->b[13] = RCONST(0.1364317403482215641609022744494239843327);
    B->b[14] = RCONST(0.3057013983082797397721005067920369646664e-1);

    B->d[0] = RCONST(0.1996996514886773085518508418098868756464e-1);
    B->d[7] = RCONST(2.191499304949330054530747099310837524864);
    B->d[8] = RCONST(0.8857071848208438030833722031786358862953e-1);
    B->d[9] = RCONST(0.1140560234865965622484956605091432032674);
    B->d[10] = RCONST(0.2533163805345107065564577734569651977347);
    B->d[11] = RCONST(-2.056564386240941011158999594595981300493);
    B->d[12] = RCONST(0.3408096799013119935160094894224543812830);
    B->d[15] = RCONST(0.4834231373823958314376726739772871714902e-1);

    B->c[1] = RCONST(0.3462e-1);
    B->c[2] = RCONST(0.9702435063878044594828361677100617517633e-1);
    B->c[3] = RCONST(0.1455365259581706689224254251565092627645);
    B->c[4] = RCONST(0.561);
    B->c[5] = RCONST(0.2290079115904850126662751771814700052182);
    B->c[6] = RCONST(0.5449920884095149873337248228185299947818);
    B->c[7] = RCONST(0.645);
    B->c[8] = RCONST(0.48375);
    B->c[9] = RCONST(0.6757e-1);
    B->c[10] = RCONST(0.25);
    B->c[11] = RCONST(0.6590650618730998549405331618649220295334);
    B->c[12] = RCONST(0.8206);
    B->c[13] = RCONST(0.9012);
    B->c[14] = RCONST(1);
    B->c[15] = RCONST(1);
    return B;
  })

ARK_BUTCHER_TABLE(ARKODE_FEHLBERG_13_7_8, { /* Fehlberg-8-7 */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(13, SUNTRUE);
    B->q = 8;
    B->p = 7;
    B->A[1][0] = RCONST(2.0)/RCONST(27.0);
    B->A[2][0] = RCONST(1.0)/RCONST(36.0);
    B->A[2][1] = RCONST(1.0)/RCONST(12.0);
    B->A[3][0] = RCONST(1.0)/RCONST(24.0);
    B->A[3][2] = RCONST(1.0)/RCONST(8.0);
    B->A[4][0] = RCONST(5.0)/RCONST(12.0);
    B->A[4][2] = RCONST(-25.0)/RCONST(16.0);
    B->A[4][3] = RCONST(25.0)/RCONST(16.0);
    B->A[5][0] = RCONST(1.0)/RCONST(20.0);
    B->A[5][3] = RCONST(1.0)/RCONST(4.0);
    B->A[5][4] = RCONST(1.0)/RCONST(5.0);
    B->A[6][0] = RCONST(-25.0)/RCONST(108.0);
    B->A[6][3] = RCONST(125.0)/RCONST(108.0);
    B->A[6][4] = RCONST(-65.0)/RCONST(27.0);
    B->A[6][5] = RCONST(125.0)/RCONST(54.0);
    B->A[7][0] = RCONST(31.0)/RCONST(300.0);
    B->A[7][4] = RCONST(61.0)/RCONST(225.0);
    B->A[7][5] = RCONST(-2.0)/RCONST(9.0);
    B->A[7][6] = RCONST(13.0)/RCONST(900.0);
    B->A[8][0] = RCONST(2.0);
    B->A[8][3] = RCONST(-53.0)/RCONST(6.0);
    B->A[8][4] = RCONST(704.0)/RCONST(45.0);
    B->A[8][5] = RCONST(-107.0)/RCONST(9.0);
    B->A[8][6] = RCONST(67.0)/RCONST(90.0);
    B->A[8][7] = RCONST(3.0);
    B->A[9][0] = RCONST(-91.0)/RCONST(108.0);
    B->A[9][3] = RCONST(23.0)/RCONST(108.0);
    B->A[9][4] = RCONST(-976.0)/RCONST(135.0);
    B->A[9][5] = RCONST(311.0)/RCONST(54.0);
    B->A[9][6] = RCONST(-19.0)/RCONST(60.0);
    B->A[9][7] = RCONST(17.0)/RCONST(6.0);
    B->A[9][8] = RCONST(-1.0)/RCONST(12.0);
    B->A[10][0] = RCONST(2383.0)/RCONST(4100.0);
    B->A[10][3] = RCONST(-341.0)/RCONST(164.0);
    B->A[10][4] = RCONST(4496.0)/RCONST(1025.0);
    B->A[10][5] = RCONST(-301.0)/RCONST(82.0);
    B->A[10][6] = RCONST(2133.0)/RCONST(4100.0);
    B->A[10][7] = RCONST(45.0)/RCONST(82.0);
    B->A[10][8] = RCONST(45.0)/RCONST(164.0);
    B->A[10][9] = RCONST(18.0)/RCONST(41.0);
    B->A[11][0] = RCONST(3.0)/RCONST(205.0);
    B->A[11][5] = RCONST(-6.0)/RCONST(41.0);
    B->A[11][6] = RCONST(-3.0)/RCONST(205.0);
    B->A[11][7] = RCONST(-3.0)/RCONST(41.0);
    B->A[11][8] = RCONST(3.0)/RCONST(41.0);
    B->A[11][9] = RCONST(6.0)/RCONST(41.0);
    B->A[12][0] = RCONST(-1777.0)/RCONST(4100.0);
    B->A[12][3] = RCONST(-341.0)/RCONST(164.0);
    B->A[12][4] = RCONST(4496.0)/RCONST(1025.0);
    B->A[12][5] = RCONST(-289.0)/RCONST(82.0);
    B->A[12][6] = RCONST(2193.0)/RCONST(4100.0);
    B->A[12][7] = RCONST(51.0)/RCONST(82.0);
    B->A[12][8] = RCONST(33.0)/RCONST(164.0);
    B->A[12][9] = RCONST(12.0)/RCONST(41.0);
    B->A[12][11] = RCONST(1.0);

    B->b[5]  = RCONST(34.0)/RCONST(105.0);
    B->b[6]  = RCONST(9.0)/RCONST(35.0);
    B->b[7]  = RCONST(9.0)/RCONST(35.0);
    B->b[8]  = RCONST(9.0)/RCONST(280.0);
    B->b[9]  = RCONST(9.0)/RCONST(280.0);
    B->b[11] = RCONST(41.0)/RCONST(840.0);
    B->b[12] = RCONST(41.0)/RCONST(840.0);

    B->d[0]  = RCONST(41.0)/RCONST(840.0);
    B->d[5]  = RCONST(34.0)/RCONST(105.0);
    B->d[6]  = RCONST(9.0)/RCONST(35.0);
    B->d[7]  = RCONST(9.0)/RCONST(35.0);
    B->d[8]  = RCONST(9.0)/RCONST(280.0);
    B->d[9]  = RCONST(9.0)/RCONST(280.0);
    B->d[10] = RCONST(41.0)/RCONST(840.0);

    B->c[1]  = RCONST(2.0)/RCONST(27.0);
    B->c[2]  = RCONST(1.0)/RCONST(9.0);
    B->c[3]  = RCONST(1.0)/RCONST(6.0);
    B->c[4]  = RCONST(5.0)/RCONST(12.0);
    B->c[5]  = RCONST(1.0)/RCONST(2.0);
    B->c[6]  = RCONST(5.0)/RCONST(6.0);
    B->c[7]  = RCONST(1.0)/RCONST(6.0);
    B->c[8]  = RCONST(2.0)/RCONST(3.0);
    B->c[9]  = RCONST(1.0)/RCONST(3.0);
    B->c[10] = RCONST(1.0);
    B->c[12] = RCONST(1.0);
    return B;
  })

/* ==========================================================
 * FIXED STEP METHODS
 * ========================================================*/

ARK_BUTCHER_TABLE(ARKODE_KNOTH_WOLKE_3_3, { /* Knoth-Wolke-ERK */
    ARKodeButcherTable B = ARKodeButcherTable_Alloc(3, SUNFALSE);
    B->q = 3;
    B->p = 0;
    B->A[1][0] = RCONST(1.0)/RCONST(3.0);
    B->A[2][0] = RCONST(-3.0)/RCONST(16.0);
    B->A[2][1] = RCONST(15.0)/RCONST(16.0);

    B->b[0] = RCONST(1.0)/RCONST(6.0);
    B->b[1] = RCONST(3.0)/RCONST(10.0);
    B->b[2] = RCONST(8.0)/RCONST(15.0);

    B->d = NULL;

    B->c[1] = RCONST(1.0)/RCONST(3.0);
    B->c[2] = RCONST(3.0)/RCONST(4.0);
    return B;
  })
